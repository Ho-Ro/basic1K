0000                          ; Will Stevens
0000                          ; 25th Feb 2023
0000                          ; 1K 8080 BASIC
0000                          ; GPL v3
0000                          ; 
0000                          ; Terminal settings:
0000                          ; 
0000                          ; Assumes that outputting a newline requires
0000                          ; CR and LF, and that pressing return on the
0000                          ; terminal sends CR and LF. 1K BASIC echoes all
0000                          ; characters it receives back to the terminal.
0000                          ; I believe that these settings are compatible
0000                          ; with using a Teletype Model 33 in full duplex
0000                          ; mode.
0000                          ; 
0000                          ; Post-assembly checklist
0000                          ; 
0000                          ; 1. LineNumSub is >= address 223h
0000                          ; 2. DivSub is <= address 2ffh
0000                          ; 3. DivJzError is at address 3xxh
0000                          ; 4. In LineStartsWithInt, the jump to
0000                          ;    DeleteProgramLine is on the same
0000                          ;    page as DeleteProgramLine
0000                          ; 5. Program does not exceed 1k
0000                          ; 6. In ClassLookup, check that QuoteClass
0000                          ;    has LSBit different from othet class
0000                          ;    routines.
0000                          ; 7. Ready is at address 00DE
0000                          ; 8. Code before 'Ready:' does not overlap with
0000                          ;    'Ready:', Can be seen from the HEX file.
0000                          ; 
0000                          ; Development log:
0000                          ; 2023-03-03 About 450 bytes long
0000                          ; 2023-03-08 About 750 bytes long
0000                          ; 2023-03-11 About 840 bytes long
0000                          ; 2023-03-12 About 930 bytes long.
0000                          ;   String tokens added.
0000                          ;   * and / yet to be added.
0000                          ;   Some scope for size optimization.
0000                          ; 2023-03-12 About 940 bytes long
0000                          ;		* added
0000                          ;		some reduction in code size done
0000                          ; 2023-03-16 About 970 bytes long
0000                          ;   unsigned / and integer output added
0000                          ;		about 30 bytes could be saved
0000                          ;		by using RST in place of call
0000                          ;   in some places
0000                          ; 2023-03-17 About 940 bytes long
0000                          ; 2023-03-17 About 970 bytes long
0000                          ;		INPUT added
0000                          ; 2023-03-19 About 960 bytes long
0000                          ;    some bug fixes
0000                          ;		 capable of playing lunar lander
0000                          ; 2023-03-22 About 970 bytes long
0000                          ;		 signed / added
0000                          ; 2023-03-24 About 950 bytes long
0000                          ;		 more code size reductions
0000                          ;		 signed integer parsing supported
0000                          ; 2023-03-24 About 940 bytes long
0000                          ;    more code size reductions
0000                          ; 2023-03-27 About 950 bytes long
0000                          ;		 simplified operator calling and
0000                          ;		 simplified a few operators
0000                          ;		 working on memory rotate function needed
0000                          ;		 for line deletion and insertion
0000                          ; 2023-04-09 About 970 bytes long.
0000                          ;		 more code size reductions
0000                          ;		 first draft of memory rotate function added
0000                          ; 2023-04-12 About 995 bytes long
0000                          ;		 line deletion function more complete
0000                          ;		 looking for better way of decreasing
0000                          ;		 PROG_PTR after line deletion
0000                          ; 2023-04-16 About 986 bytes long
0000                          ;    line deletion apparently working
0000                          ;    some code size reductions
0000                          ; 2023-04-16 About 963 bytes long
0000                          ;			further code size reductions
0000                          ; 2023-04-17 About 930 bytes long
0000                          ;			looked for subroutine code sharing and
0000                          ;			LXI trick optimisations.
0000                          ;			Likely that some bugs will have been
0000                          ;			introduced when doing this
0000                          ; 2023-04-18 About 900 bytes long
0000                          ;			greatly reduced CharClass size
0000                          ; 2023-04-20 About 880 bytes long
0000                          ;			more code size reduction
0000                          ; 2023-04-23 About 970 bytes long
0000                          ;			first draft of code for LIST added
0000                          ; 2023-04-25 About 970 bytes long
0000                          ;			LIST command working
0000                          ; 2023-04-27 About 950 bytes long
0000                          ;			More code size reduction
0000                          ; 2023-04-28 About 950 bytes long
0000                          ;			used RST_CompareJump to save
0000                          ;			2 bytes for every CPI JZ where
0000                          ;			the jump is to same page
0000                          ; 2023-04-28 Free space: 78 bytes
0000                          ; 2023-04-29 Free space: 84 bytes
0000                          ;			Initialise PROG_PTR at start
0000                          ;			Added NEW and END
0000                          ;			Added direct statement handling
0000                          ; 2023-04-30 Free space: 86 bytes
0000                          ;			Fixed bugs with deleting first and
0000                          ;			last program lines
0000                          ; 2023-05-02 Free space: about 60 bytes
0000                          ;			added code to allow out-of-order
0000                          ;			line number entry (first draft)
0000                          ; 2023-05-02 Free space: about 54 bytes
0000                          ;			all basic functionality now implemented
0000                          ;			items to improve:
0000                          ;			division
0000                          ;			syntax checking
0000                          ; 2023-05-04 Free space: about 79 bytes
0000                          ;			more code size reduction
0000                          ;			partly through handling EndProgram
0000                          ;			and LineNum better in threaded code
0000                          ;			likely to have introduced bugs
0000                          ; 2023-05-07 Free space: about 69 bytes
0000                          ;			Improved expression evaluation by
0000                          ;			making it recursively callable
0000                          ;			and no longer requiring operator stack
0000                          ;			and about 20 bytes shorter.
0000                          ;			Used freed space for more syntax checks
0000                          ; 2023-05-08 Free space: about 44 bytes
0000                          ;			First draft of support for array var @
0000                          ; 2023-05-17 Free space: About 100 bytes
0000                          ;			First draft of new parser from
0000                          ;			experiments/parsing3.asm.
0000                          ;			Still need to modify string representation
0000                          ;			and change how INPUT parses integer,
0000                          ;			and check string token doesn't interfere
0000                          ;			after TokenList, and check order in
0000                          ;			TokenList.
0000                          ;			Seems likely that enough space has been
0000                          ;			freed to be able to implement FOR...NEXT
0000                          ; 2023-05-19 Free space: About 101 bytes
0000                          ;			Issues listed above have been addressed now
0000                          ;			Testing needed to iron out problems
0000                          ; 2023-05-26 Free space: About 84 bytes
0000                          ;			various bug fixes
0000                          ;			PRINT allows comma at end to suppress
0000                          ;			newline.
0000                          ;			Show > prompt symbol when ready.
0000                          ; 2023-05-27 Free space: About 17 bytes
0000                          ;			Added FOR NEXT (no STEP yet)
0000                          ;			Need more space
0000                          ; 2023-05-27 Free space: About 36 bytes
0000                          ;			Made a few small byte savings, and put
0000                          ;			token subs onto page 2 so that last one
0000                          ;			can flow onto page 3, freeing some space
0000                          ;			in page 2 to avoid having to jump out.
0000                          ;			One TODO to action
0000                          ; 2023-05-28 Free space: About 42 bytes
0000                          ; 2023-05-29 Free space: About 53 bytes
0000                          ;			Made some changes to * and / which I hope
0000                          ;			are improvements (efficienxy + code size)
0000                          ;			but testing needed to confirm this.
0000                          ; 2023-06-02 Free space: About 12 bytes
0000                          ;			Added support for STEP to FOR loops
0000                          ;			Noted where Z flag is in known state
0000                          ;			in JMP instructions, because there is
0000                          ;			potential space saving by having
0000                          ;			2-byte in-page JMP, JNZ or JZ,
0000                          ;			code shared with RST_CompareJump
0000                          ; 2023-06-03 Free space: About 10 bytes
0000                          ;			STEP works in +ve direction only
0000                          ;			Fixing will require more space
0000                          ;			Would also like to add ABS, RND, USR
0000                          ;			But probably need about 60 bytes for that
0000                          ; 2023-06-03 Free space: About 19 bytes
0000                          ;			Added in-page JZ to free up space
0000                          ;			Likely to have introduced errors
0000                          ; 2023-06-04 Free space: About 25 bytes
0000                          ;			Shortened PrintSub
0000                          ; 2023-06-04 Free space: about -21 bytes
0000                          ;			Implementing ABS and USR and skeleton
0000                          ;		  of RND makes it 21 bytes over budget.
0000                          ;			So it seems reasonable to think that
0000                          ;			space can be made for these.
0000                          ; 2023-06-05 Free space: about -15 bytes
0000                          ; 2023-06-19 Free space: about 6 bytes
0000                          ;			Replaced memory rotate with triple reversal
0000                          ;			algorithm. Back below size limit, but need
0000                          ;		  to rearrange things to realize this.
0000                          ; 2023-06-22 Free space: about 10 bytes
0000                          ;			All free space is in the RST area, which I
0000                          ;     am reluctant to use because I expect that
0000                          ;			when I try to target actual hardware I will
0000                          ;			need to extend PutChar, and maybe have
0000                          ;			some initialization code for e.g. UART.
0000                          ;			So discounting this I am 2 bytes over
0000                          ;			budget, and haven't implemented RND
0000                          ;			function yet
0000                          ; 2023-06-23 Free space : 18 bytes
0000                          ;			Saved space with more sharing between
0000                          ; 		LET and INPUT
0000                          ;			Ready to do a lot of testing
0000                          ; 2023-06-28 Free space : 20 bytes
0000                          ; 2023-06-28 Free space : 19 bytes
0000                          ;			Fixed enough bugs that lunar lander works
0000                          ;			Function calls don't work yet
0000                          ; 2023-07-01 Free space : 24 bytes
0000                          ;			ABS function works
0000                          ;			RND function currently does nothing
0000                          ;			need to make implementation of RND
0000                          ;			that fits in 17 bytes
0000                          ; 2023-07-04 Free space : 20 bytes
0000                          ;			Implemented simple lookup-based RND
0000                          ;			replaced newline RST with LDAX B, INX B
0000                          ;			saved a few bytes in LIST
0000                          ; 2023-07-05 Free space : 11 bytes
0000                          ;			Implemented XORSHIFT RND function
0000                          ; 2023-07-08 Free space: 10 bytes
0000                          ; 2023-07-12 Free space: 15 bytes
0000                          ;			Fixed forgotten issue where STEP in FOR
0000                          ;			loop didn't work if negative
0000                          ; 2023-07-13 Free space: 13 bytes
0000                          ;			Extended variable range up to 32
0000                          ;			So that user has 31 variables and array
0000                          ;			var 30 can be used to work out
0000                          ;			remaining memory
0000                          ;			var 31 is RNG seed
0000                          ; 2023-07-15 Noticed bug where -32768 isn't
0000                          ;     displayed
0000                          ; 2023-07-15 When playing REVERSE, saw corrupted
0000                          ;			array, which implies that bug where stack
0000                          ;			continually growing
0000                          ; 2023-07-16 Above two issues fixed. Former
0000                          ;     required change to PrintInteger. Latter
0000                          ;			was due to a GOTO from within FOR loop,
0000                          ;			in REVERSE and not necessarily a problem
0000                          ;			with this interpreter
0000                          ; 2024-01-01 Fixed bug where parse error wasn't
0000                          ;     displayed as ? during LIST
0000                          ; 2024-01-28 Fixed bug where @ was displayed as M
0000                          ;     during LIST
0000                          ; 2024-02-07 Working on corrections to comparison
0000                          ;     operators. Not in working state. Made I/O
0000                          ;     compatible with Dick Whipple's Front Panel
0000                          ;     8080 simulator
0000                          ; 2024-02-08 May have fixed comparison operator
0000                          ;     problem. Need to save 2 bytes to be able to
0000                          ;     test it
0000                          ; 2024-02-08 Reclaimed some space so that 3FEh is
0000                          ;     the last byte uses. Free space 5 bytes.
0000                          ; 2024-02-18 Worked towards reclaiming 4 bytes in
0000                          ;     the tokenizer. Good chance of being
0000                          ;     incorrect, will require debugging.
0000                          ; 2024-02-20 Debugged above changes and
0000                          ;     they seem okau. Free space 9 bytes
0000                          ; 2024-02-22 Rearranged RSTs and added CPI to end
0000                          ;     of RST_LDAXB_INXB_CPI to save memory.
0000                          ;     Free space still 9 bytes but now
0000                          ;     7 of those are at the end of 1K, so are
0000                          ;     easy to make use of.
0000                          ;     Need to check movement and alignment
0000                          ;     of subroutines.
0000                          ;     It would be useful to have a checklist of
0000                          ;     all dependencies that need to be checked
0000                          ;     when there are large movements in memory.
0000                          ; 
0000                          ;     Next things to do:
0000                          ;     - unterminated string check
0000                          ;     - forbidding excess chars in tokens
0000                          ;     - correct operator precedence for * /
0000                          ;     - error on divide by zero
0000                          ;     not sure whether all 4 can be done in
0000                          ;     only 7 bytes
0000                          ; 2024-02-25 Added unterminated string check and
0000                          ;     didvide by zero error. 2 bytes over budget.
0000                          ; 2024-02-25 Realised that removing reatriction
0000                          ;     that RUN, LIST and NEW only allowed in
0000                          ;     direct mode would will probably save a
0000                          ;     sufficient number of bytes to finish all
0000                          ;     outstanding work
0000                          ; 2024-02-28 Sveral changes related to issues
0000                          ;     listed above, Divide by zero and
0000                          ;     unterminated string now generate error
0000                          ;     messages. 2 bytes free which should be
0000                          ;     enough to make * and / equal precedence,
0000                          ;     but will test everything else first. Issue
0000                          ;     about tokens with excess chars not being
0000                          ;     detected as errors will remain unfixed in
0000                          ;     first release.
0000                          ; 2024-03-01 Found bug where recent changes
0000                          ;     caused DeleteProgramLine to move page.
0000                          ;     In the course of fixing it, may have saved
0000                          ;     5 bytes. Need to test that fix is correct.
0000                          ; 2024-03-01 Fixed a bug introduced on 28 Feb
0000                          ;     where ExecuteDirect was called without
0000                          ;     setting B. Wrote 'game of life' example
0000                          ;     program. When printing newline, added CR
0000                          ;     before after discovering that some
0000                          ;     terminals need this. Need to free up
0000                          ;     1 byte to fix operator precedence issue
0000                          ; 2024-03-02 This version correcly runs
0000                          ;     lander.bas, reverse.bas, life.bas,
0000                          ;     operatortests.bas, operatortests2.bas,
0000                          ;     looptests.bas
0000                          ; 2024-03-02 Freed up 1 byte by removing
0000                          ;     redundant STC
0000                          ; 2024-03-03 Added code to make * same
0000                          ;     precedence as / (needs testing).
0000                          ;     Changed RNG from XORSHIFT to LCG.
0000                          ;     This saved 3 bytes.
0000                          ;     Need to experiment with LCG constant
0000                          ;     for best RNG performance.
0000                          ;     Behaviour of RNG function changed so
0000                          ;     that max valid input parameter is 256,
0000                          ;     because low order bits of RNG have
0000                          ;     low period. Only high ordet bits of
0000                          ;     RNG are used for return value.
0000                          ; 2024-03-04 Altered EndProgram address.
0000                          ;     Temporarily tried making RAM start at 1000h
0000                          ;     to check that this doesn't cause problems
0000                          ; 2024-03-06 Changed IO to support Stefan Tramms
0000                          ;     8080 emulator.
0000                          ; 2024-03-11 Moved start of RAM back to 0400h
0000                          ; 2024-03-12 Changed initialisation so that
0000                          ;     spurious char is no longer output on
0000                          ;     reset or NEW.
0000                          ; 2024-03-15 Realised during testing that
0000                          ;     ExpEvaluate can sometimes try to return
0000                          ;     when stack isn't a return address.
0000                          ;     Realised that ExpEvaluate must either
0000                          ;     succeed or fail, with no backtrack.
0000                          ;     This required substantial changes to
0000                          ;     PrintSub, especially a change to how it
0000                          ;     knows if it has just had a comma. This
0000                          ;     is now done based on parity of H.
0000                          ;     To be retested.
0000                          ; 
0000                          ;     Had an idea that operators and statements
0000                          ;     could reside on different pages, creating
0000                          ;     more space for both, and perhaps removing
0000                          ;     the need for some of the Jumps out of
0000                          ;     page 2 to statement implementation.
0000                          ;2024-03-23
0000                          ;     Changed INPUT so that it doesn't display
0000                          ;     a prompt. It was confusing to have the
0000                          ;     > prompt as is used in direct mode. Instead
0000                          ;     programs that need a prompt before input
0000                          ;     can use the multistatement line
0000                          ;     PRINT "?", INPUT A
0000                          ; 2024-03-25 Found a fix for problem where
0000                          ;     -32768/2 has wrong sign. It costs 3 bytes
0000                          ;     so need to find 2 byte saving before Ready
0000                          ;     and 1 byte saving after Ready
0000                          ; 2024-03-26 In the process of making major
0000                          ;     rearrangements to save several bytes and
0000                          ;     fix the bug mentioned above.
0000                          ; 2024-03-27 Major rearrangements have been done.
0000                          ;      Net reault is to save 5 bytes, but need
0000                          ;      to carefully check whether any same-page
0000                          ;      assumptions are violated
0000                          ; 2024-03-28 Found and fixed several bugs related
0000                          ;			 to above changes. Execution of ? token
0000                          ;			 seems to take too long, implying a
0000                          ;			 remaining bug. 9 bytes free now, 5 of
0000                          ;			 which are contiguous at the end of the
0000                          ;			 program.
0000                          ; 2024-03-29 Two bugs to fix : prompt appears
0000                          ; 		 twice after entering first line.
0000                          ;			 detection of syntax errors is slow
0000                          ; For development purposes assume we have
0000                          ; 1K ROM from 0000h-03FFh containing BASIC
0000                          ; 1K RAM from 0400h-0800h
0000                RAM_BASE:   EQU   0400h   
0000                RAM_TOP:   EQU   0800h   
0000                          ; Token values
0000                          ; 0-31 are variables (0 = @)
0000                          ; IntegerToken must be one more than last var
0000                INTEGERTOKEN:   EQU   32   
0000                QUESTIONMARKTOKEN:   EQU   33   
0000                STRINGTOKEN:   EQU   34   
0000                          ; Callable tokens are low byte of subroutine to call
0000                          ; Errors are displayed as Ex where x is an error
0000                          ; code which is tbe address on the stack when
0000                          ; Error subroutine is called.
0000                          ; Input buffer is just 8 bytes long
0000                          ; used by input statement to get an integer.
0000                          ; If there is a buffer overflow because user
0000                          ; enters too much, the behaviour is system
0000                          ; dependent - e.g. if writes above RAM
0000                          ; space do nothing then its not a problem.
0000                          ; If memory space repeats and lower 1K
0000                          ; is ROM then also not much of a problem.
0000                INPUT_BUFFER:   EQU   RAM_TOP-8   
0000                STACK_INIT:   EQU   RAM_TOP-8   
0000                          ; this must be on a 256 byte boundary
0000                VAR_SPACE:   EQU   RAM_BASE   
0000                          ; 30 words, first of which is not
0000                          ; accessible to user, so can be
0000                          ; used for PROG_PTR
0000                PROG_PTR:   EQU   RAM_BASE   
0000                          ; 2 words accessible to user as variables
0000                          ; 30 and 31 (^ and _)
0000                PROG_PARSE_PTR:   EQU   RAM_BASE+60   
0000                RNG_SEED:   EQU   RAM_BASE+62   
0000                PROG_BASE:   EQU   RAM_BASE+64   
0000                          .ORG   00h   
0000                          ; I would like this to be:
0000                          ; LXI H,PROG_BASE
0000                          ; SHLD PROG_PTR
0000                          ; JMP Ready
0000                          ; 
0000                          ; But this doesn't fit in 8 bytes.
0000                          ; Instead we find a place in the program
0000                          ; that already has "LXI B,PROG_BASE" and
0000                          ; follow it with "dw Ready" and set SP to that
0000                          ; address, then POP H from
0000                          ; the stack and store it in PROG_PTR, then
0000                          ; RET will jump to Ready.
0000                          ; We must ensure that Ready is at address
0000                          ; 00DE for this to work, because the
0000                          ; sequence DE00 executes SBI 0, which is
0000                          ; harmless.
0000   31 85 02               LXI   SP,ExecuteProgram+1   
0003   E1                     POP   H   
0004   22 00 04               SHLD   PROG_PTR   
0007   C9                     RET   
0008                          .ORG   08h   
0008                          ; PutChar is called frequently
0008                          ; PutChar must return with Z set
0008                PUTCHAR:   
0008                          ; port 1 is for char I/O
0008   D3 01                  OUT   1   
000A                          ; 
000A                          ; Having the wait loop after the character
000A                          ; is output will slow down I/O when running
000A                          ; on hardware, but I can't think of a way
000A                          ; of fitting this into 8 bytes otherwise.
000A                          ; 
000A                PUTCHARWAITLOOP:   ; address 000ah
000A                          ; TODO change these few instructions
000A                          ; if targetting hardware
000A   AF                     XRA   A   
000B   C9                     RET   
000C                          ;IN 1
000C                          ;ANI 040h
000C                          ;RZ
000C                          ;db 0c3h ; opcode for JMP
000C                          ; the following two bytes are
000C                          ; 0ah and 00h, so this jumps to
000C                          ; PutCharWaitLoop
000C                          ; 
0010                          .ORG   10h   
0010   0A                     LDAX   B   ; opcode 0ah
0011   00                     NOP   ; opcode 00h
0012   03                     INX   B   
0013   E3                     XTHL   
0014   BE                     CMP   M   
0015   23                     INX   H   
0016   E3                     XTHL   
0017   C9                     RET   
0018                          ; 
0018                          .ORG   18h   
0018                          ; byte after RST is compared with A
0018                          ; if equal then jump to address on same page.
0018                          ; 
0018                          ; only use where performance is not
0018                          ; important (parsing, printing)
0018   E3                     XTHL   
0019   BE                     CMP   M   
001A   23                     INX   H   
001B   C3 21 00               JMP   CompareJump_Entry   
001E                          ; 
001E                          ; 2 bytes free
0020                          .ORG   20h   
0020   E3                     XTHL   
0021                COMPAREJUMP_ENTRY:   
0021   C2 25 00               JNZ   JZPage_Skip   
0024   6E                     MOV   L,M   
0025                JZPAGE_SKIP:   
0025   23                     INX   H   
0026                EXPAPPLYOP:   ; shared code
0026   E3                     XTHL   
0027   C9                     RET   
0028                          .ORG   28h   
0028                COMPAREHLDE:   
0028                          ; compare HL and DE, return
0028                          ; Z equal, NZ if not equal
0028                          ; C equal, NC if not equal
0028                          ; A will be zero if Z is set
0028   7D                     MOV   A,L   
0029   AB                     XRA   E   
002A   C0                     RNZ   
002B   7C                     MOV   A,H   
002C   AA                     XRA   D   
002D   C0                     RNZ   
002E   37                     STC   
002F   C9                     RET   
0030                          .ORG   30h   
0030                NEGATEDE:   
0030                          ;flags are not affected
0030                          ; 
0030                          ; decrement and invert so that we end
0030                          ; up with D in A - sometimes handy
0030   1B                     DCX   D   
0031   7B                     MOV   A,E   
0032   2F                     CMA   
0033   5F                     MOV   E,A   
0034   7A                     MOV   A,D   
0035   2F                     CMA   
0036   57                     MOV   D,A   
0037   C9                     RET   
0038                          .ORG   38h   
0038                          ; BC points to program
0038                          ; DE contains value
0038                          ; Stack is used for both operands and
0038                          ; operators
0038                EXPEVALUATE:   
0038                          ; ExpEvaluate must not be called
0038                          ; from page 1, The hi byte of the return address
0038                          ; is a marker to distinguish it from an operator.
0038                          ; Only operators have hi byte = 1
0038                EXPEVALUATENUM:   
0038                          ; Expecting ( var integer or - sign
0038                          ; or function call
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0038   D7 RST   2   
0039   BD                     DB   LeftBraceToken&0ffh   
        **MACRO UNROLL - RST_JZPAGE
003A   E7 RST   4   
003B   A0                     DB   (ExpLeftBrace&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
003C   DF RST   3   
003D   E6 73                  DB   SubSub&0xff,(ExpNegate&0ffh)-1   
003F                          ; 
003F                          ; last function
003F   FE C1                  CPI   (RndSub+1)&0ffh   
0041   D4 B3 00               CNC   Error   
0044                          ; first function
0044   FE BA                  CPI   AbsSub&0ffh   
0046   D2 A2 00               JNC   FunctionCall   ; between RndSub and AbsSub
0049                          ; 
0049   FE 20                  CPI   IntegerToken   
004B   DA 55 00               JC   ExpVar   
004E                          ; 
004E                          ; Integer token is one more than last var
004E                          ; token so if carry is set then it is a var
004E                          ; 
004E   C4 B3 00               CNZ   Error   
0051                          ; Fall through to ExpInteger
0051                EXPINTEGER:   
0051   60                     MOV   H,B   
0052   69                     MOV   L,C   
0053   03                     INX   B   
0054   03                     INX   B   
0055                          ; 
0055                          ; fall through with carry clear
0055                EXPVAR:   
0055                          ; carry set if jumped to here
0055                          ; 
0055   DC F0 02               CC   GetVarLocation   
0058                EXPVARGETVALUE:   
0058   5E                     MOV   E,M   
0059   23                     INX   H   
005A   56                     MOV   D,M   
005B                EXPEVALUATEOP:   
005B                          ;Expecting operator or right bracket or
005B                          ;end of expression
005B                          ; 
005B                          ;Are there operators on the stack?
005B   E1                     POP   H   
005C                          ; 
005C                          ; H will be 0, 2 or 3 if no operators on
005C                          ; stack (i.e. high byte of return address)
005C                          ; 
005C   7C                     MOV   A,H   
005D   3D                     DCR   A   
005E   C2 6D 00               JNZ   SkipExpApplyOp   
0061                          ; 
0061                          ; if L is equal to MulSub then apply it.
0061                          ; this gives * same precedence as /
0061                          ;MOV A,L
0061                          ;RST_CompareJump
0061                          ;DB (MulSub&0ffh),(ExpApplyOp&0ffh)-1
0061                          ; 
0061   7D                     MOV   A,L   
0062   FE E7                  CPI   NegateSub&0ffh   
0064   D2 26 00               JNC   ExpApplyOp   
0067                          ; 
0067   0A                     LDAX   B   
0068                          ; 
0068                          ; No longer needed since case below
0068                          ; includes this
0068                          ;CPI Operators&0ffh
0068                          ; Is it the end of the expression?
0068                          ;JC ExpApplyOp
0068                          ; 
0068                          ; Does operator on stack have GTE precedence?
0068                          ; (or end of expression, when A < operators)
0068   3D                     DCR   A   
0069   BD                     CMP   L   
006A                          ; 
006A   DA 26 00               JC   ExpApplyOp   ; apply the operator
006D                          ; that was on the stack
006D                          ; 
006D                SKIPEXPAPPLYOP:   
006D   E5                     PUSH   H   ; put operator that was on stack
006E                          ; back onto stack
006E                          ; 
006E   0A                     LDAX   B   
006F                          ; 
006F   FE CD                  CPI   Operators&0ffh   
0071                          ; Is it the end of the expression?
0071   D8                     RC   
0072                          ; 
0072   03                     INX   B   
0073                          ; 
0073                          ; fall through
0073   21                     DB   21h   ; LXI H eats 2 bytes
0074                EXPNEGATE:   
0074   3C                     INR   A   
0075   11 00 00               LXI   D,0   
0078                          ; 
0078   21 5B 00               LXI   H,ExpEvaluateOp   ; address to return to
007B                          ; after operator is called
007B   E5                     PUSH   H   
007C                          ; 
007C                          ; Put 0 onto stack and operator onto
007C                          ; operator stack
007C                          ; 
007C   D5                     PUSH   D   ; operand
007D   6F                     MOV   L,A   
007E   26 01                  MVI   H,AddSub/256   
0080   E5                     PUSH   H   
0081                          ; 
0081   C3 38 00               JMP   ExpEvaluateNum   
0084                FORSUBIMPL:   
0084                          ; Stack contains return address:
0084                          ; ExecuteProgramLoop - EPL
0084                          ; Keep it there even though it isn't used by
0084                          ; ForSub, it will be used by NextSub
0084                          ; 
0084   E5                     PUSH   H   ; stack contains <SP> VL+1, EPL
0085                          ; 
0085                          ; check that we have a 'TO' token
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0085   D7 RST   2   
0086   A9                     DB   ToToken&0ffh   
0087   C4 B3 00               CNZ   Error   
008A                          ; 
        **MACRO UNROLL - RST_EXPEVALUATE
008A   FF RST   7   
        **MACRO UNROLL - RST_NEGATEDE
008B   F7 RST   6   
008C                          ; 
008C   D5                     PUSH   D   ; stack contains <SP> -T,VL+1, EPL
008D                          ; T is target
008D                          ; 
008D                          ; step is going to be 1 unless we encounter
008D                          ; a STEP token
008D   11 01 00               LXI   D,1   
0090   0A                     LDAX   B   
0091                          ; 
0091                          ; check for optional STEP token
        **MACRO UNROLL - RST_COMPAREJUMP
0091   DF RST   3   
0092   AA 94                  DB   StepToken&0ffh,(ForWithStep&0ffh)-1   
0094   21                     DB   21h   ; LXI H opcode eats the next 2 bytes
0095                FORWITHSTEP:   
0095                          ; we have step token
0095   03                     INX   B   
        **MACRO UNROLL - RST_EXPEVALUATE
0096   FF RST   7   
0097                          ; 
0097   E1                     POP   H   
0098   E1                     POP   H   ; H contains VL+1
0099                          ; 
0099                          ; B contains the start address of the
0099                          ; loop (LS)
0099                          ; 
0099   C5                     PUSH   B   ; stack contains -T <SP> LS,EPL
009A   3B                     DCX   SP   
009B   3B                     DCX   SP   ; stack contains <SP> -T,LS,EPL
009C   D5                     PUSH   D   ; stack contains <SP>,S,-T,LS,EPL
009D   E5                     PUSH   H   ; stack contains <SP>,VL+1,S,-T,LS,EPL
009E                          ; 
009E   C3 89 02               JMP   ExecuteProgramLoop   
00A1                EXPLEFTBRACE:   
00A1   0B                     DCX   B   
00A2                FUNCTIONCALL:   
00A2                          ; push return address
00A2   11 5B 00               LXI   D,ExpEvaluateOp   
00A5   D5                     PUSH   D   
00A6                          ; A contains the address to call on page 1
00A6                          ; push function address
00A6   6F                     MOV   L,A   
00A7   26 01                  MVI   H,AbsSub/256   
00A9   E5                     PUSH   H   
00AA                          ; 
00AA                          ; fall through
00AA                          ; This must be before Error so that it
00AA                          ; can fall through
00AA                EXPBRACKETEDB:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
00AA   D7 RST   2   
00AB   BD                     DB   LeftBraceToken&0ffh   
00AC   C4 B3 00               CNZ   Error   
        **MACRO UNROLL - RST_EXPEVALUATE
00AF   FF RST   7   
00B0                          ; 
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
00B0   D7 RST   2   
00B1   AB                     DB   RightBraceToken&0ffh   
00B2   C8                     RZ   
00B3                          ; 
00B3                          ; fall through
00B3                          ;Display error code and go back to line entry
00B3                ERROR:    
00B3   CD 41 02               CALL   CRLF   
00B6   3E 45                  MVI   A,'E'   
        **MACRO UNROLL - RST_PUTCHAR
00B8   CF RST   1   
00B9   D1                     POP   D   
00BA   CD 66 03               CALL   PrintInteger   
00BD                          ; 
00BD                          ; fall through
00BD                          ; 
00BD                          ; we need ready to be at an address
00BD                          ; corresponding to harmless opcodes when
00BD                          ; executed in ExecuteProgram
00BD                          .ORG   00bdh   
00BD                READY:    
00BD                          ; Set stack pointer
00BD                          ; Do this every time to guard against
00BD                          ; GOSUB with no RETURN errors
00BD                          ; 
00BD   31 F8 07               LXI   SP,STACK_INIT   
00C0                          ; 
00C0   CD 41 02               CALL   CRLF   
00C3                          ; 
00C3                          ; Use this if no CRLF is needed
00C3                          ; and sure that stack can't be wrong
00C3                READYNONEWLINE:   
00C3                          ; 
00C3   2A 00 04               LHLD   PROG_PTR   
00C6   E5                     PUSH   H   ; push it because we need it after
00C7                          ; GetLine
00C7   CD 32 01               CALL   GetLine   
00CA                          ; 
00CA   36 80                  MVI   M,EndProgram&0ffh   
00CC                          ; 
00CC   22 3C 04               SHLD   PROG_PARSE_PTR   
00CF   E1                     POP   H   
00D0                          ; 
00D0   E5                     PUSH   H   
00D1   C1                     POP   B   
00D2                          ; 
00D2   7E                     MOV   A,M   
00D3                          ; Regardless of which branch taken
00D3                          ; we need this marker here.
00D3                          ; This overwrites the token to execute,
00D3                          ; but we've already got that in A
00D3   36 80                  MVI   M,EndProgram&0ffh   
00D5                          ; 
00D5   FE 20                  CPI   IntegerToken   
00D7   C2 8A 02               JNZ   ExecuteDirect   
00DA                          ; 
00DA                LINESTARTSWITHINT:   
00DA                          ; Get the line number into DE
00DA   23                     INX   H   
00DB   5E                     MOV   E,M   
00DC   23                     INX   H   
00DD   56                     MOV   D,M   
00DE   23                     INX   H   
00DF                          ; 
00DF                          ; Is it an integer all by itself?
00DF                          ; If so then delete the line
00DF                          ; 
00DF                          ; call GetLineNum to find either the line, or
00DF                          ; pointer to next location in program after it
00DF                          ; 
00DF   66                     MOV   H,M   ; preserve M (GetLineNum doesn't touch H)
00E0   CD FF 02               CALL   GetLineNum   
00E3   7C                     MOV   A,H   
00E4   2A 00 04               LHLD   PROG_PTR   
00E7   F5                     PUSH   PSW   
00E8                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
00E8   DF RST   3   
00E9   80                     DB   EndProgram&0ffh   
00EA   FA                     DB   (DeleteProgramLine&0ffh)-1   
00EB                          ; 
00EB   F1                     POP   PSW   
00EC                          ; if GetLineNum returns a match then this is
00EC                          ; an error, user must delete line first
00EC   CC B3 00               CZ   Error   
00EF                          ; 
00EF                          ; do a memory rotate with
00EF                          ; first = GetLine/ATNLN address
00EF                          ; middle = PROG_PTR
00EF                          ; last = PROG_PARSE_PTR
00EF                          ; 
00EF   36 23                  MVI   M,LineNumSub&0ffh   ; undo what we did earlier
00F1   EB                     XCHG   
00F2   2A 3C 04               LHLD   PROG_PARSE_PTR   
00F5                          ; 
00F5   E5                     PUSH   H   ; last
00F6   C5                     PUSH   B   ; first
00F7                          ; 
00F7   D5                     PUSH   D   ; middle
00F8                          ; 
00F8                          ; carry is clear here from the call to
00F8                          ; GwrLineNum
00F8                          ; 
00F8   C3 0B 01               JMP   Entry   
00FB                DELETEPROGRAMLINE:   
00FB                          ; 25 bytes
00FB   F1                     POP   PSW   
00FC                          ; 
00FC   C2 C3 00               JNZ   ReadyNoNewLine   ; line not found, do nothing
00FF   E5                     PUSH   H   
0100   C5                     PUSH   B   ; first
0101   E5                     PUSH   H   ; last
0102                          ; 
0102   09                     DAD   B   ; HL=PROG_PTR+first
0103                          ; 
0103   03                     INX   B   
0104   CD 1A 03               CALL   ATNLN_Int   ; Z is set when this is called
0107                          ; 
0107                          ;set HL to what we want PROG_PTR to be
0107   50                     MOV   D,B   
0108   59                     MOV   E,C   
        **MACRO UNROLL - RST_NEGATEDE
0109   F7 RST   6   
010A                          ; 
010A   19                     DAD   D   ; HL=PROG_PTR+first-middle
010B                          ; 
010B                          ; because DAD D above always causes HL
010B                          ; to decrease, it must set carry
010B                          ; so STC below is not needed
010B                          ;STC ; skip first reverse in memory rotate
010B                          ; because we don't care about the
010B                          ; line being deleted
010B                          ; 
010B                ENTRY:    
010B                          ; carry is clear if coming from insert
010B                          ; 
010B   C5                     PUSH   B   ; middle (or first)
010C   22 00 04               SHLD   PROG_PTR   
010F                          ; 
010F                MEMORYROTATE:   
010F                          ; 27 bytes
010F                          ; stack must contain (from top down)
010F                          ; first, middle, first, last
010F                          ; DE = middle
010F                          ; HL = Last
010F   D4 1C 01               CNC   Reverse   
0112   CD 19 01               CALL   ReverseDH   
0115   01 C3 00               LXI   B,ReadyNoNewLine   
0118   C5                     PUSH   B   
0119                REVERSEDH:   
0119   E1                     POP   H   
011A   D1                     POP   D   
011B   E3                     XTHL   
011C                REVERSE:   
011C                          ; HL = last (i.e 1 after the last byte to swap)
011C                          ; DE = first
011C                REVERSELOOP:   
        **MACRO UNROLL - RST_COMPAREHLDE
011C   EF RST   5   
011D   C8                     RZ   
011E   2B                     DCX   H   
        **MACRO UNROLL - RST_COMPAREHLDE
011F   EF RST   5   
0120   C8                     RZ   
0121                          ; 
0121   46                     MOV   B,M   
0122   1A                     LDAX   D   
0123   77                     MOV   M,A   
0124   78                     MOV   A,B   
0125   12                     STAX   D   
0126   13                     INX   D   
0127                          ; 
0127   C3 1C 01               JMP   ReverseLoop   
012A                          ; GetLine sits entirely in page 1
012A                          ; good - it uses RST_CompareJump in two
012A                          ; places, so be careful if moving it
012A                          ; Also it assumes ClassLookup on same page
012A                          ; as NoCharClass
012A                NLTESTTRUE:   
012A                          ; error if we are in the middle
012A                          ; of a string
012A   7D                     MOV   A,L   
012B   FE 7C                  CPI   QuoteClassExpEnd&0ffh   
012D   CC B3 00               CZ   Error   
0130                          ; 
0130   E1                     POP   H   
0131   C9                     RET   
0132                GETLINE:   
0132                          ; HL points where we want the line to be
0132                          ; parsed to.
0132                          ; On return HL points to byte after what we've
0132                          ; got.
0132                          ; 
0132   3E 3E                  MVI   A,'>'   
        **MACRO UNROLL - RST_PUTCHAR
0134   CF RST   1   
0135                GETLINENOPROMPT:   
0135   E5                     PUSH   H   
0136   06 00                  MVI   B,0   
0138                FRESHSTART:   
0138   21 65 01               LXI   H,NoCharClass   
013B                          ; 
013B                NLTEST:   
013B                          ; check for newline
013B   78                     MOV   A,B   
        **MACRO UNROLL - RST_COMPAREJUMP
013C   DF RST   3   
013D   0A 29                  DB   10,(NLTestTrue&0ffh)-1   
013F                          ; 
013F                NEXTCHARLOOP:   
013F                          ; This code is compatable with Stefan Tramm's
013F                          ; 8080 emulator
013F   DB 00                  IN   0   
0141   A7                     ANA   A   
        **MACRO UNROLL - RST_JZPAGE
0142   E7 RST   4   
0143   3E                     DB   (NextCharLoop&0ffh)-1   
0144   DB 01                  IN   1   
0146   47                     MOV   B,A   
0147   D3 01                  OUT   1   ; echo
0149                          ; 
0149                          ; Do we have the same class as before?
0149   E5                     PUSH   H   
014A   21 C7 02               LXI   H,ClassLookup-1   
014D                          ; Test for quote first
014D                          ; This doesn't save spave, but takes 3 bytes
014D                          ; away from class lookup and puts them here
014D                          ; so can be used to change odd/even of
014D                          ; ...Class subroutines
014D                          ;RST_CompareJump
014D                          ;DB 34,(LC_QuoteTestTrue-1)&0ffh
014D                LOOKUPCLASSLOOP:   
014D   2C                     INR   L   
014E   BE                     CMP   M   
014F   2C                     INR   L   
0150   DA 4D 01               JC   LookupClassLoop   
0153                LC_QUOTETESTTRUE:   
0153   4E                     MOV   C,M   
0154   E1                     POP   H   
0155                          ; 
0155                          ; are L and C equal?
0155   7D                     MOV   A,L   
0156   A9                     XRA   C   
0157                          ; Z if they are equal, NZ if not
0157   E9                     PCHL   ; Jump based on previous CharClass pointer
0158                DIGITCLASS:   
        **MACRO UNROLL - RST_JZPAGE
0158   E7 RST   4   
0159   69                     DB   (DigitClassNotEnd&0ffh)-1   
015A                DIGITCLASSEND:   
015A                          ; Write token into program
015A                          ; need to preserve DE, don't care about HL
015A   E3                     XTHL   
015B   36 20                  MVI   M,IntegerToken   
015D   23                     INX   H   
015E   73                     MOV   M,E   
015F   23                     INX   H   
0160   36                     DB   36h   ; opcode for MVI M eats next byte
0161                WRITE_SHARED_ATSP:   
0161   D1                     POP   D   
0162                WRITE_SHARED:   
0162   72                     MOV   M,D   
0163                WRITE_SHARED_WRITTEN:   
0163   23                     INX   H   
0164   E3                     XTHL   
0165                NOCHARCLASS:   
0165   69                     MOV   L,C   
0166   AF                     XRA   A   ; set Z
0167   57                     MOV   D,A   ; reset state information
0168   5F                     MOV   E,A   
0169   E9                     PCHL   
016A                DIGITCLASSNOTEND:   
016A   E5                     PUSH   H   
016B                          ; A is zero at this point
016B                          ; Accumulate the value into D
016B                          ; Muliply by 10
016B   62                     MOV   H,D   
016C   6B                     MOV   L,E   
016D                          ; 
016D   29                     DAD   H   
016E   29                     DAD   H   
016F   19                     DAD   D   
0170   29                     DAD   H   
0171                          ; 
0171                          ; Add in the new digit
0171                          ; 
0171   57                     MOV   D,A   
0172   78                     MOV   A,B   
0173   E6 0F                  ANI   0fh   
0175   5F                     MOV   E,A   
0176   19                     DAD   D   
0177                          ; 
0177   EB                     XCHG   
0178                          ; 
0178   E1                     POP   H   
0179                          ; 
0179   C3 3F 01               JMP   NextCharLoop   
017C                QUOTECLASSEXPEND:   
017C                          ; A is equal to:
017C                          ; char class (C) XOR QuoteCharClassExpEnd
017C                          ; 
017C                          ; so long as QuoteCharClass is the only class
017C                          ; with an odd address or the only one
017C                          ; with an even address then A will only
017C                          ; have LSB=1 if current char class
017C                          ; is QuoteCharClass - i.e. end of string
017C                          ; 
017C   E6                     DB   0e6h   ; opcode for ANI eats next byte
017D                          ; (which is 2dh lsbits are 01)
017D                          ; 
017D                QUOTECLASS:   
017D   2D                     DCR   L   ; set to QuoteClassExpEnd
017E                          ; first time through A is zero
017E                          ; on fall A is even unless C is QuoteClass
017E                          ; 
017E   A4                     ANA   H   ; H is 1
017F                          ; 
017F                          ; Now Z is set if this was first Quote, or if
017F                          ; we are in a string and haven't reached
017F                          ; last quote
017F                          ; 
017F                          ; carry is clear here
017F   DA                     DB   0dah   ; opcode for JC eats next 2 bytes
0180                LT0CLASS:   
0180   23                     INX   H   ; next char should always count as
0181                          ; different class
0181   00                     NOP   
0182                COMPCLASS:   
0182   00                     NOP   
0183   00                     NOP   
0184                ALPHACLASS:   
0184                          ; 
0184   E3                     XTHL   
0185   70                     MOV   M,B   
0186   23                     INX   H   
0187   E3                     XTHL   
0188                          ; 
0188   1B                     DCX   D   ; increase char count
0189                          ; 
0189                          ; if NZ then we will just
0189                          ; have written a different class char:
0189                          ; good, this ensures no spurious
0189                          ; strcmp matches from leftover
0189                          ; buffer contents
0189                          ; 
0189                          ; now we need to decide whether to jump to:
0189                          ; FreshStart - if its the last quote in
0189                          ;							 a string
0189                          ; NLTest		 - if part way through string or
0189                          ;								token
0189                          ; TokenClassEnd - if end of token
0189                          ; 
        **MACRO UNROLL - RST_JZPAGE
0189   E7 RST   4   
018A   3A                     DB   (NLTest&0ffh)-1   
018B                          ; 
018B   7D                     MOV   A,L   
        **MACRO UNROLL - RST_COMPAREJUMP
018C   DF RST   3   
018D   7C 37                  DB   QuoteClassExpEnd&0ffh,(FreshStart&0ffh)-1   
018F                          ; 
018F                TOKENCLASSEND:   
018F                          ; Make H point to the start of the token
018F                          ; to be looked up
018F   E3                     XTHL   
0190   19                     DAD   D   
0191                          ; 
0191                          ; it's a var if bits 7,6,5 are 010 and
0191                          ; E=-2
0191                          ; These aren't the only conditions that
0191                          ; could lead to the test below passing -
0191                          ; e.g. if 7,6,5=001 and E=10011110. But E
0191                          ; has to be large for this to happen, so
0191                          ; quite unlikely in practice.
0191   7E                     MOV   A,M   
0192   EE 40                  XRI   040h   
0194   57                     MOV   D,A   
0195   E6 E0                  ANI   0e0h   
0197   AB                     XRA   E   
0198                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
0198   DF RST   3   
0199   FE 61                  DB   0feh,(Write_Shared&0ffh)-1   
019B                          ; 
019B   11 8E 03               LXI   D,TokenList   
019E                LOOKUPTOKEN_LOOP:   
019E   1A                     LDAX   D   
019F   F5                     PUSH   PSW   
01A0   E5                     PUSH   H   
01A1                STRCMP:   
01A1   13                     INX   D   
01A2   1A                     LDAX   D   
01A3   AE                     XRA   M   
01A4                          ; iff match then A is either 00h or 80h
01A4                          ; (80h if last char)
01A4   23                     INX   H   
        **MACRO UNROLL - RST_JZPAGE
01A5   E7 RST   4   
01A6   A0                     DB   (Strcmp&0ffh)-1   ; match and not last char
01A7                          ; 
01A7                          ; equal to 080h iff match and last char
01A7   EE 80                  XRI   080h   
01A9                          ; equal to Z iff match and last char
01A9   E1                     POP   H   
01AA                          ; 
        **MACRO UNROLL - RST_JZPAGE
01AA   E7 RST   4   
01AB   60                     DB   (Write_Shared_AtSP&0ffh)-1   
01AC                          ; 
01AC   F1                     POP   PSW   
01AD                LOOKUPTOKEN:   
01AD   1A                     LDAX   D   
01AE   17                     RAL   
01AF   1C                     INR   E   ; Z set if end of TokenList
01B0   D2 AD 01               JNC   LookupToken   
01B3   C2 9E 01               JNZ   LookupToken_Loop   
01B6                          ; 
01B6                          ; didn't find it
01B6                          ; if (HL)>=64 and (HL+1)<64 then its a var
01B6                          ; could do the var test here
01B6                          ; if it can be done in few bytes
01B6                          ; 
01B6   36 21                  MVI   M,QuestionMarkToken&0ffh   
        **MACRO UNROLL - RST_JZPAGE
01B8   E7 RST   4   
01B9   62                     DB   (Write_Shared_Written&0ffh)-1   
01BA                          .ORG   01bah   
01BA                ABSSUB:   
01BA                          ; A = right brace token, which has high bit
01BA                          ; set, so no need to negate DE if XRA with D
01BA                          ; still leaves high bit set
01BA   AA                     XRA   D   
01BB   F8                     RM   
01BC                          ; 
        **MACRO UNROLL - RST_NEGATEDE
01BC   F7 RST   6   
01BD                          ; 
01BD                          ; shared code. okay for this to go here
01BD                          ; because in ExpEvaluateNum, test for
01BD                          ; left brace is before test for token
01BD                          ; between first and last function
01BD                LEFTBRACETOKEN:   
01BD   C9                     RET   
01BE                USRSUB:   
01BE   EB                     XCHG   
01BF   E9                     PCHL   
01C0                RNDSUB:   
01C0                          ; LCG
01C0                          ; don't use low byte in return value.
01C0                          ; Multiplier 47989 is mentioned here:
01C0                          ; https://groups.google.com/g/prng/c/evszGs76o1w?pli=1
01C0   D5                     PUSH   D   
01C1   2A 3E 04               LHLD   RNG_SEED   
01C4   11 75 BB               LXI   D,47989   
01C7   CD EB 01               CALL   MulSub   ; A is zero after this
01CA   C3 D6 02               JMP   RndSubImpl   
01CD                          ; 
01CD                          ; Token values >= this are all operators
01CD                OPERATORS:   
01CD                          ; 
01CD                LTESUB:   
01CD                          ; Swap operands and fall through
01CD   EB                     XCHG   
01CE                GTESUB:   
        **MACRO UNROLL - RST_COMPAREHLDE
01CE   EF RST   5   
        **MACRO UNROLL - RST_JZPAGE
01CF   E7 RST   4   
01D0   DB                     DB   (BinReturn&0ffh)-1   
01D1                GTSUB:    
01D1                          ; Swap operands and fall through
01D1   EB                     XCHG   
01D2                LTSUB:    
01D2   7D                     MOV   A,L   
01D3   93                     SUB   E   
01D4   7C                     MOV   A,H   
01D5   9A                     SBB   D   
01D6   1F                     RAR   
01D7   AC                     XRA   H   
01D8   AA                     XRA   D   
01D9   17                     RAL   
01DA   3E                     DB   3eh   ; MVI A opcode to eat next byte
01DB                EQUALSUB:   
        **MACRO UNROLL - RST_COMPAREHLDE
01DB   EF RST   5   ; returns Z iff HL=DE
01DC                BINRETURN:   
01DC   3F                     CMC   
01DD   3E                     DB   3eh   ; MVI A opcode to eat next byte
01DE                          ; 
01DE                NOTEQUALSUB:   
        **MACRO UNROLL - RST_COMPAREHLDE
01DE   EF RST   5   ; returns Z iff HL=DE
01DF   11 01 00               LXI   D,1   
01E2   D0                     RNC   
01E3   1B                     DCX   D   
01E4   C9                     RET   
01E5                ADDSUB:   
01E5   D2                     DB   0d2h   ; opcode for JNC to eat 2 bytes
01E6                SUBSUB:   
01E6   00                     NOP   
01E7                NEGATESUB:   
        **MACRO UNROLL - RST_NEGATEDE
01E7   F7 RST   6   
01E8                          ;Add DE to HL and keep in DE
01E8   19                     DAD   D   
01E9   EB                     XCHG   
01EA                          ; 
01EA   C9                     RET   
01EB                MULSUB:   
01EB                          ; 20 bytes
01EB                          ; multiple HL and DE into DE, preserving B
01EB   C5                     PUSH   B   
01EC   44                     MOV   B,H   
01ED   4D                     MOV   C,L   
01EE                MULTIPLY:   
01EE                          ;multiply BC and DE into DE
01EE   3E 10                  MVI   A,16   
01F0                MULLOOP:   
01F0   29                     DAD   H   
01F1   EB                     XCHG   
01F2   29                     DAD   H   
01F3   EB                     XCHG   
01F4   D2 F8 01               JNC   DontAdd   
01F7   09                     DAD   B   
01F8                DONTADD:   
01F8   3D                     DCR   A   
01F9   C2 F0 01               JNZ   MulLoop   
01FC                          ; 
01FC   EB                     XCHG   
01FD   C1                     POP   B   
01FE   C9                     RET   
01FF                          ; 
01FF                DIVSUB:   
01FF                          ; 31 bytes
01FF                          ;Divide HL by DE
01FF                          ;Remainder in HL
01FF                          ;Result in DE
01FF                DIVIDEHL:   
01FF                          ;Divide HL by DE
01FF                          ; Make HL and DE different signs
01FF   7C                     MOV   A,H   
0200   CD BA 01               CALL   AbsSub   
0203   F5                     PUSH   PSW   
0204                          ; 
0204                          ;Divide HL by DE
0204                          ;Assuming that HL and DE are different signs
0204   C5                     PUSH   B   
0205   01 FF FF               LXI   B,0ffffh   
0208                          ; 
0208                          ; Do the test for zero here because we want the
0208                          ; CZ to be on page 3
0208                          ; This means that divide by zero and unterminated
0208                          ; string both have tbe same error code, but kt
0208                          ; will be obvious to the programmer which is
0208                          ; intended
0208   7A                     MOV   A,D   
0209   B3                     ORA   E   
020A                DIVJZERROR:   
020A   CC B3 00               CZ   Error   
020D                          ; 
020D                DIVLOOP:   
020D   03                     INX   B   
020E   19                     DAD   D   
020F   1F                     RAR   ; look for mismatch between carry and
0210                          ; bit 7 of D to detect overflow/underflow
0210   AA                     XRA   D   
0211   F2 0D 02               JP   DivLoop   
0214                          ; if HL is zero then it must have been a negative number originally, and the remainder is zero, so don't make any change to HL, but increment quotient by 1
0214                          ; 
0214   7C                     MOV   A,H   
0215   B5                     ORA   L   
        **MACRO UNROLL - RST_JZPAGE
0216   E7 RST   4   ; assume it is on same page
0217                          ; because DivSub will
0217                          ; be right at end of page 2
0217   1A                     DB   (DivNoRestore&0ffh)-1   
0218                          ; 
        **MACRO UNROLL - RST_NEGATEDE
0218   F7 RST   6   
0219   19                     DAD   D   
021A   0B                     DCX   B   
021B                          ; 
021B                DIVNORESTORE:   
021B   03                     INX   B   
021C   50                     MOV   D,B   
021D   59                     MOV   E,C   
021E                          ; 
021E   C1                     POP   B   
021F                          ; 
021F   F1                     POP   PSW   
0220   F0                     RP   
        **MACRO UNROLL - RST_NEGATEDE
0221   F7 RST   6   
0222                          ; 
0222   C9                     RET   
0223                LINENUMSUB:   
0223   03                     INX   B   
0224   03                     INX   B   
0225   C9                     RET   
0226                          ; 
0226                PRINTSUB:   
0226                PRINTSUBLOOP:   
0226                          ; on call HL is address of PrintSub
0226                          ; so H has odd parity
0226                          ; on subsequent passes H = 0 or QuoteChar
0226                          ; so H has even parity
0226   0A                     LDAX   B   
0227                          ; 
0227   D6 22                  SUI   StringToken   
        **MACRO UNROLL - RST_JZPAGE
0229   E7 RST   4   
022A   35                     DB   (PrintSubString&0ffh)-1   
022B                          ; 
022B                          ; This assumes that LinenumSub is the
022B                          ; next token after StringToken
022B   FE 87                  CPI   (LastStatement-StringToken+1)&0ffh   
022D                          ; 
022D   24                     INR   H   ; doesn't affect carry
022E                          ; parity will be even if we've just
022E                          ; entered subroutine.
022E                          ; odd otherwise
022E                          ; 
022E   DA 40 02               JC   PrintSubEnd   
0231                          ; 
0231                PRINTSUBEXPRESSION:   
        **MACRO UNROLL - RST_EXPEVALUATE
0231   FF RST   7   
0232   CD 66 03               CALL   PrintInteger   
0235                          ; 
0235   37                     STC   
0236                PRINTSUBSTRING:   
0236   D4 E3 02               CNC   OutputString   ; carry is clear on return
0239                          ; A is either Quote char or zero at this point
0239                          ; (00000000 or 00100010) both even parity
0239   67                     MOV   H,A   
023A                          ; 
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
023A   D7 RST   2   
023B   AC                     DB   CommaToken   
        **MACRO UNROLL - RST_JZPAGE
023C   E7 RST   4   
023D   25                     DB   (PrintSubLoop&0ffh)-1   
023E                          ; 
023E   0B                     DCX   B   
023F   25                     DCR   H   ; make sure that newline is printed when
0240                          ; we fall through, parity will be even
0240                PRINTSUBEND:   
0240   E0                     RPO   ; don't print newline if we've just had
0241                          ; comma
0241                CRLF:     
0241   3E 0D                  MVI   A,13   
        **MACRO UNROLL - RST_PUTCHAR
0243   CF RST   1   
0244   3E 0A                  MVI   A,10   
        **MACRO UNROLL - RST_PUTCHAR
0246   CF RST   1   
0247   C9                     RET   
0248                          ; 
0248                GOSUBSUB:   
        **MACRO UNROLL - RST_EXPEVALUATE
0248   FF RST   7   
0249   E1                     POP   H   
024A                          ; 
024A   C5                     PUSH   B   
024B   E5                     PUSH   H   
024C                          ; 
024C   3E                     DB   03eh   ; opcode for MVI A to eat next byte
024D                GOTOSUB:   
        **MACRO UNROLL - RST_EXPEVALUATE
024D   FF RST   7   
024E   CD FF 02               CALL   GetLineNum   
0251   C8                     RZ   
0252   CD B3 00               CALL   Error   
0255                INPUTSUB:   
0255   CD EB 02               CALL   GetVarLocationBVar   
0258   E5                     PUSH   H   
0259   21 F8 07               LXI   H,INPUT_BUFFER   
025C   C5                     PUSH   B   
025D   E5                     PUSH   H   
025E                          ; 
025E   CD 35 01               CALL   GetLineNoPrompt   
0261   C1                     POP   B   
        **MACRO UNROLL - RST_EXPEVALUATE
0262   FF RST   7   
0263   C1                     POP   B   
0264                          ; fall through
0264                POPHASSIGNTOVAR:   
0264   E1                     POP   H   
0265                          ; 
0265                          ; Put DE into var (HL)
0265                          ; 
0265   73                     MOV   M,E   
0266   23                     INX   H   
0267   72                     MOV   M,D   
0268                          ; 
0268   C9                     RET   
0269                FORSUB:   
0269   21 84 00               LXI   H,ForSubImpl   
026C   E5                     PUSH   H   
026D                          ; 
026D                          ; fall through
026D                          ; 
026D                LETSUB:   
026D   CD EB 02               CALL   GetVarLocationBVar   
0270   E5                     PUSH   H   
0271                          ; 
0271                          ; Test that we have an equals sign
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0271   D7 RST   2   
0272                          ; 
0272   DB                     DB   EqualSub&0ffh   
0273   C4 B3 00               CNZ   Error   
0276                          ; 
        **MACRO UNROLL - RST_EXPEVALUATE
0276   FF RST   7   
0277                          ; 
0277   C3 64 02               JMP   POPHAssignToVar   
027A                          ; 
027A                IFSUB:    
        **MACRO UNROLL - RST_EXPEVALUATE
027A   FF RST   7   
027B   7A                     MOV   A,D   
027C   B3                     ORA   E   
027D   C0                     RNZ   
027E                          ; If DE zero then fall through to next line
027E   C3 1C 03               JMP   AdvanceToNextLineNum   
0281                          ; 
0281                ENDSUB:   
0281   C3 BD 00               JMP   Ready   
0284                          ; Hi byte of AdvanceToNextLineNum is 3
0284                          ; which is opcode for INR B : harmless
0284                ENDPROGRAM:   EQU   EndSub-1   
0284                          ; 
0284                EXECUTEPROGRAM:   
0284                          ; Point BC to first line
0284                          ; Don't skip over the line number
0284                          ; because we need the constant PROG_BASE
0284                          ; at this location in memory
0284   01 40 04               LXI   B,PROG_BASE   
0287   BD 00                  DW   Ready   ; Ready must correspond to
0289                          ; a harmless instruction sequence
0289                EXECUTEPROGRAMLOOP:   
0289   0A                     LDAX   B   
028A                          ; 
028A                EXECUTEDIRECT:   
028A                          ; 
028A   D6 23                  SUI   LineNumSub&0ffh   
028C                          ; 
028C                          ; Check that it is a token between
028C                          ; LinenumSub and LastStatement
028C   FE 86                  CPI   (LastStatement-LineNumSub+1)&0ffh   
028E   D4 B3 00               CNC   Error   
0291                          ; 
0291   03                     INX   B   
0292   C6 23                  ADI   LineNumSub&0ffh   
0294                          ; 
0294                          ; Carry is clear now
0294                          ; Sign is set/reset according to the
0294                          ; address of the statement Sub
0294                          ; e.g. for LineNumSub Sign is clear
0294                          ; 
0294                          ; Put return address onto stack
0294   21 89 02               LXI   H,ExecuteProgramLoop   
0297   E5                     PUSH   H   
0298                          ; 
0298                          ; Put pointer to call address into HL
0298   6F                     MOV   L,A   
0299                          ; ExecuteProgramLoop must be on the same page
0299                          ; page as PrintSub so that we don't have to
0299                          ; update H
0299                          ; Jump to it
0299                          ; Carry is clear when we do this
0299   E9                     PCHL   
029A                NEWSUB:   
029A   C7                     RST   0   
029B                LISTSUB:   
029B   C3 2D 03               JMP   ListSubImpl   
029E                RETURNSUB:   
029E                          ; Expect stack size to be 6 or more
029E                          ; any less and we have return without gosub
029E   21 0D F8               LXI   H,-(STACK_INIT-6)-1   
02A1   39                     DAD   SP   
02A2   DC B3 00               CC   Error   
02A5                          ; 
02A5   E1                     POP   H   ; Get return address first
02A6   C1                     POP   B   ; Get pointer to program loc to return to
02A7   E9                     PCHL   ; instead of RET
02A8                LASTSTATEMENT:   
02A8                NEXTSUB:   
02A8   E1                     POP   H   ; discard return address
02A9                          ; stack contains <SP> VL+1,S,-T,LS,EPL
02A9   E1                     POP   H   ; get VL+1
02AA                          ; stack contains VL+1 <SP> S,-T,LS,EPL
02AA   56                     MOV   D,M   
02AB   2B                     DCX   H   
02AC   5E                     MOV   E,M   
02AD                          ; 
02AD   E3                     XTHL   ; step is in HL, VL is in (SP)
02AE                          ; stack contains VL+1 <SP> VL, -T,LS,EPL
02AE   EB                     XCHG   ; step is in DE, var value in HL
02AF   19                     DAD   D   ; add step onto var
02B0   EB                     XCHG   ; result is in DE, step is in HL
02B1   E3                     XTHL   ; step is in (SP), VL is in HL
02B2                          ; stack contains VL+1 <SP> S, -T,LS,EPL
02B2                          ; 
02B2   73                     MOV   M,E   ; put back into VL
02B3   23                     INX   H   ; H = VL+1
02B4   72                     MOV   M,D   ; DE now has loop var value (LV)
02B5                          ; 
02B5   F1                     POP   PSW   ; get step so that hi bit of A has
02B6                          ; sign of step
02B6   E1                     POP   H   ; get -T
02B7                          ; stack contains VL+1,S,-T <SP> LS,EPL
02B7                          ; 
02B7   19                     DAD   D   ; HL now has LV-T
02B8                          ; 
02B8   AC                     XRA   H   ; xor sign of step with
02B9                          ; sign of result
02B9                          ; 
02B9                          ; if result of xor above is 1
02B9                          ; then keep looping, or if HL
02B9                          ; is zero then keep looping
02B9                          ; 
02B9   D1                     POP   D   ; this is LoopStart
02BA                          ; stack contains VL+1,S,-T,LS <SP> EPL
02BA                          ; 
02BA   FA C0 02               JM   NextSubLoop   
02BD                          ; 
02BD   7C                     MOV   A,H   
02BE   B5                     ORA   L   
02BF   C0                     RNZ   
02C0                          ; 
02C0                NEXTSUBLOOP:   
02C0                          ; 
02C0   42                     MOV   B,D   
02C1   4B                     MOV   C,E   
02C2   21 F6 FF               LXI   H,-10   
02C5   39                     DAD   SP   
02C6   F9                     SPHL   
02C7                          ; 
02C7   C9                     RET   
02C8                          ; 
02C8                          ; ( ) , TO STEP tokens must have values between
02C8                          ; statements and functions
02C8                TOTOKEN:   EQU   LastStatement+1   
02C8                STEPTOKEN:   EQU   LastStatement+2   
02C8                RIGHTBRACETOKEN:   EQU   LastStatement+3   
02C8                COMMATOKEN:   EQU   LastStatement+4   
02C8                CLASSLOOKUP:   
02C8   40 84                  DB   64,AlphaClass&0ffh   
02CA   3A 82                  DB   58,CompClass&0ffh   
02CC   30 58                  DB   48,DigitClass&0ffh   
02CE   23 80                  DB   35,LT0Class&0ffh   
02D0   22 7D                  DB   34,QuoteClass&0ffh   
02D2   21 80                  DB   33,LT0Class&0ffh   
02D4   00 38                  DB   0,FreshStart&0ffh   
02D6                RNDSUBIMPL:   
02D6   EB                     XCHG   
02D7   23                     INX   H   
02D8   22 3E 04               SHLD   RNG_SEED   
02DB                          ; Use only the high byte to get a value
02DB                          ; between 0 and 255
02DB   6C                     MOV   L,H   
02DC   67                     MOV   H,A   
02DD   D1                     POP   D   
02DE                          ; 
02DE   CD FF 01               CALL   DivideHL   
02E1   EB                     XCHG   
02E2   C9                     RET   
02E3                          ; This 8 byte routine can be moved anywhere to
02E3                          ; fill holes. It needs a RET on the same
02E3                          ; page to jump to
02E3                OUTPUTSTRING:   
02E3                          ;Pointer in B points to string token marker
02E3   03                     INX   B   
02E4                OUTPUTSTRINGLOOP:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
02E4   D7 RST   2   
02E5   22                     DB   StringToken   
        **MACRO UNROLL - RST_JZPAGE
02E6   E7 RST   4   
02E7   FD                     DB   (OutputStringRet&0ffh)-1   
02E8                OUTPUTSTRING_WITHQUOTE:   
        **MACRO UNROLL - RST_PUTCHAR
02E8   CF RST   1   
        **MACRO UNROLL - RST_JZPAGE
02E9   E7 RST   4   
02EA   E3                     DB   (OutputStringLoop&0ffh)-1   
02EB                          ; This 20 byte routine can be moved as needed
02EB                GETVARLOCATIONBVAR:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
02EB   D7 RST   2   
02EC                          ; Test that we have a var
02EC   20                     DB   32   
02ED   D4 B3 00               CNC   Error   
02F0                GETVARLOCATION:   
02F0                          ; A should contain a var token
02F0                          ; and B points to tbe location after
02F0                          ; the var token
02F0                          ; return with var address in HL
02F0                          ; and B pointing to next char
02F0                          ; A will never be 255 on return
02F0   26 04                  MVI   H,VAR_SPACE/256   
02F2   87                     ADD   A   
02F3   6F                     MOV   L,A   
02F4                          ; 
02F4   C0                     RNZ   
02F5                          ; 
02F5                          ; fall through if it is array var
02F5                          ; 
02F5   CD AA 00               CALL   ExpBracketedB   
02F8                          ; 
02F8                          ; Now DE contains the array index
02F8                          ; Add it twice to get the offset
02F8                          ; 
02F8   2A 3C 04               LHLD   PROG_PARSE_PTR   
02FB   23                     INX   H   ; up 1 byte to avoid EndProgram marker
02FC   19                     DAD   D   
02FD   19                     DAD   D   
02FE                OUTPUTSTRINGRET:   
02FE   C9                     RET   
02FF                GETLINENUM:   
02FF                          ; Line number is in DE, look it up in the
02FF                          ; program and set BC to point to the LinenumSub
02FF                          ; token.
02FF                          ; 
02FF                          ; DE is preserved
02FF                          ; H is preserved
02FF                          ; L is not preserved
02FF                          ; 
02FF                          ; return with Z set if successful
02FF                          ; 
02FF                          ; Z clear if not successful, and BC points
02FF                          ; to the first byte of the line with number
02FF                          ; greater than the request
02FF                          ; 
02FF                          ; Carry is always clear on return
02FF                          ; 
02FF   01 3F 04               LXI   B,PROG_BASE-1   ; 1 bytes before PROG_BASE
0302                GETLINENUMLOOP:   
0302   CD 1B 03               CALL   ATNLN_INXB   ; has one INX B preceeding
0305   C0                     RNZ   
0306                          ; 
0306   03                     INX   B   
0307                          ; 
0307                          ; Test for DE <= (BC), and return if true
0307   0A                     LDAX   B   
0308   03                     INX   B   
0309   93                     SUB   E   
030A   6F                     MOV   L,A   
030B   0A                     LDAX   B   
030C   9A                     SBB   D   ; C set if DE > (BC), and Z not set
030D                          ; C clear if DE <= (BC)
030D   DA 02 03               JC   GetLineNumLoop   
0310                          ; 
0310   0B                     DCX   B   
0311   0B                     DCX   B   
0312                          ; Now we want Z set if DE=(BC), clear
0312                          ; otherwise
0312                          ; 
0312                ATNLN_RETNZ:   ; shared code. Returns NZ if we know
0312                          ; that A is non-zero
0312                          ; 
0312   B5                     ORA   L   ; Carry will be cleared
0313   C9                     RET   
0314                ATNLN_STRING:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0314   D7 RST   2   
0315   22                     DB   StringToken   
0316   C2 14 03               JNZ   ATNLN_String   
0319                          ; 
0319   C2                     DB   0c2h   ; opcode for JNZ eats 2 bytes
031A                ATNLN_INT:   ; Z is always set when we reach here
031A   03                     INX   B   
031B                ATNLN_INXB:   
031B   03                     INX   B   
031C                          ; 
031C                ADVANCETONEXTLINENUM:   
031C                          ; BC is a pointer to somewhere in the program.
031C                          ; Move onto the next line number.
031C                          ; Return with Z set if successful,
031C                          ; Z clear if fell off end of program
031C   0A                     LDAX   B   
        **MACRO UNROLL - RST_COMPAREJUMP
031D   DF RST   3   
031E   80 11                  DB   EndProgram&0ffh,(ATNLN_RetNZ&0ffh)-1   
0320                          ; fell off end of program
0320                          ; 
0320   FE 23                  CPI   LinenumSub&0ffh   
0322   C8                     RZ   ; carry will be clear if we return here
0323                          ; 
0323   03                     INX   B   
0324                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
0324   DF RST   3   
0325   20 19                  DB   IntegerToken,(ATNLN_Int&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
0327   DF RST   3   
0328   22 13                  DB   StringToken,(ATNLN_String&0ffh)-1   
032A   C3 1C 03               JMP   AdvanceToNextLineNum   
032D                LISTSUBIMPL:   
032D   01 40 04               LXI   B,PROG_BASE   
0330                LISTLOOP:   
0330   3E 20                  MVI   A,' '   
        **MACRO UNROLL - RST_PUTCHAR
0332   CF RST   1   
0333                          ; 
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0333   D7 RST   2   
0334   80                     DB   EndProgram&0ffh   
0335   C8                     RZ   
0336                          ; 
0336   21 30 03               LXI   H,ListLoop   ; so that we can loop using RET
0339   E5                     PUSH   H   
033A                          ; H is already set to the correct page
033A   2E 8D                  MVI   L,(TokenList-1)&0ffh   
033C                          ; These need to be on same page
        **MACRO UNROLL - RST_COMPAREJUMP
033C   DF RST   3   
033D   22 85                  DB   StringToken,(List_String&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
033F   DF RST   3   
0340   23 5C                  DB   LinenumSub&0ffh,(List_Linenum&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
0342   DF RST   3   
0343   20 5F                  DB   IntegerToken,(List_Integer&0ffh)-1   
0345   DA 8A 03               JC   List_Var   
0348                          ; No need to check for end of TokenList
0348                          ; impossible not to be a token value in A
0348                LIST_TOKEN_LOOP:   
0348   56                     MOV   D,M   
0349   14                     INR   D   
034A   23                     INX   H   
034B   F2 48 03               JP   List_Token_Loop   
034E                LIST_TOKEN:   
034E                          ; on entry, A contains the token
034E                          ; so must not use A during this loop
034E   BE                     CMP   M   
034F   23                     INX   H   
0350   C2 48 03               JNZ   List_Token_Loop   
0353                          ; 
0353                LIST_TOKEN_STRING_LOOP:   
0353   7E                     MOV   A,M   
0354   E6 7F                  ANI   07fh   
        **MACRO UNROLL - RST_PUTCHAR
0356   CF RST   1   
0357   B6                     ORA   M   
0358   23                     INX   H   
0359   F2 53 03               JP   List_Token_String_Loop   
035C   C9                     RET   
035D                          ; 
035D                LIST_LINENUM:   
035D   CD 41 02               CALL   CRLF   
0360                LIST_INTEGER:   
0360   0A                     LDAX   B   
0361   03                     INX   B   
0362   5F                     MOV   E,A   
0363   0A                     LDAX   B   
0364   03                     INX   B   
0365   57                     MOV   D,A   
0366                          ; fall through to PrintInteger
0366                          ; 
0366                          ;Output the value in DE
0366                PRINTINTEGER:   
0366   AF                     XRA   A   
0367   F5                     PUSH   PSW   ; end marker is Z flag
0368                          ; 
0368   B2                     ORA   D   ; S is set if -ve
        **MACRO UNROLL - RST_NEGATEDE
0369   F7 RST   6   
036A                          ; 
036A   F2 71 03               JP   PrintIntegerLoop   
036D   3E 2D                  MVI   A,'-'   
        **MACRO UNROLL - RST_PUTCHAR
036F   CF RST   1   
        **MACRO UNROLL - RST_NEGATEDE
0370   F7 RST   6   
0371                          ; 
0371                PRINTINTEGERLOOP:   
0371                          ; need HL to be -ve here, so that it can
0371                          ; handle -32768
0371                          ; 
0371   EB                     XCHG   
0372   11 0A 00               LXI   D,10   
0375                          ; 
0375   CD FF 01               CALL   DivideHL   
0378                          ; HL contains remainder after / 10
0378                          ; DE contains the quotient
0378   3E 30                  MVI   A,'0'   
037A   95                     SUB   L   
037B   F5                     PUSH   PSW   ; push onto stack
037C                          ; 
037C                          ; if DE is zero we are done
037C   7A                     MOV   A,D   
037D   B3                     ORA   E   
037E   C2 71 03               JNZ   PrintIntegerLoop   
0381                          ; 
0381                PRINTINTEGERLOOP2:   
0381   F1                     POP   PSW   
0382   C8                     RZ   ; Z is set on return, HL<=0
        **MACRO UNROLL - RST_PUTCHAR
0383   CF RST   1   
        **MACRO UNROLL - RST_JZPAGE
0384   E7 RST   4   
0385   80                     DB   (PrintIntegerLoop2&0ffh)-1   
0386                LIST_STRING:   
0386   CD E8 02               CALL   OutputString_WithQuote   
0389   11                     DB   011h   ; LXI D skips 2 bytes
038A                LIST_VAR:   
038A   C6 40                  ADI   '@'   
        **MACRO UNROLL - RST_PUTCHAR
038C   CF RST   1   
038D   C9                     RET   
038E                          ; 
038E                          ; byte before TokenList must have high bit set
038E                          ; e.g. RET
038E                          ; order in this list must make sure that a
038E                          ; token A that is a left substring of another
038E                          ; token B appears later in the list than B
038E                          ; e.g. < is after <=
038E                TOKENLIST:   
038E   21                     DB   QuestionMarkToken&0ffh   
038F   BF                     DB   '?'+128   
0390   26                     DB   PrintSub&0ffh   
0391   50 52 49 4E D4         DB   "PRIN",'T'+128   
0396   6D                     DB   LetSub&0ffh   
0397   4C 45 D4               DB   "LE",'T'+128   
039A   4D                     DB   GotoSub&0ffh   
039B   47 4F 54 CF            DB   "GOT",'O'+128   
039F   48                     DB   GosubSub&0ffh   
03A0   47 4F 53 55 C2         DB   "GOSU",'B'+128   
03A5   9E                     DB   ReturnSub&0ffh   
03A6   52 45 54 55 52 CE      DB   "RETUR",'N'+128   
03AC   55                     DB   InputSub&0ffh   
03AD   49 4E 50 55 D4         DB   "INPU",'T'+128   
03B2   69                     DB   ForSub&0ffh   
03B3   46 4F D2               DB   "FO",'R'+128   
03B6   A8                     DB   NextSub&0ffh   
03B7   4E 45 58 D4            DB   "NEX",'T'+128   
03BB   7A                     DB   IfSub&0ffh   
03BC   49 C6                  DB   "I",'F'+128   
03BE   81                     DB   EndSub&0ffh   
03BF   45 4E C4               DB   "EN",'D'+128   
03C2                          ; 
03C2                          ; Before this are keywords allowed at run-time
03C2   84                     DB   ExecuteProgram&0ffh   
03C3   52 55 CE               DB   "RU",'N'+128   
03C6   9B                     DB   ListSub&0ffh   
03C7   4C 49 53 D4            DB   "LIS",'T'+128   
03CB   9A                     DB   NewSub&0ffh   
03CC   4E 45 D7               DB   "NE",'W'+128   
03CF                          ; 
03CF                          ; before operators are non-statement
03CF                          ; non-operator tokens
03CF   BA                     DB   AbsSub&0ffh   
03D0   41 42 D3               DB   "AB",'S'+128   
03D3   BE                     DB   UsrSub&0ffh   
03D4   55 53 D2               DB   "US",'R'+128   
03D7   C0                     DB   RndSub&0ffh   
03D8   52 4E C4               DB   "RN",'D'+128   
03DB                          ; 
03DB   A9                     DB   ToToken&0ffh   
03DC   54 CF                  DB   "T",'O'+128   
03DE   AA                     DB   StepToken&0ffh   
03DF   53 54 45 D0            DB   "STE",'P'+128   
03E3   AC                     DB   CommaToken   
03E4   AC                     DB   ","+128   
03E5   BD                     DB   LeftBraceToken&0ffh   
03E6   A8                     DB   '('+128   
03E7   AB                     DB   RightBraceToken&0ffh   
03E8   A9                     DB   ')'+128   
03E9   DB                     DB   EqualSub&0ffh   
03EA   BD                     DB   '='+128   
03EB   DE                     DB   NotEqualSub&0ffh   
03EC   3C BE                  DB   "<",'>'+128   
03EE   CE                     DB   GTESub&0ffh   
03EF   3E BD                  DB   ">",'='+128   
03F1   CD                     DB   LTESub&0ffh   
03F2   3C BD                  DB   "<",'='+128   
03F4   D2                     DB   LTSub&0ffh   
03F5   BC                     DB   '<'+128   
03F6   D1                     DB   GTSub&0ffh   
03F7   BE                     DB   '>'+128   
03F8   E5                     DB   AddSub&0ffh   
03F9   AB                     DB   '+'+128   
03FA   E6                     DB   SubSub&0ffh   
03FB   AD                     DB   '-'+128   
03FC   EB                     DB   MulSub&0ffh   
03FD   AA                     DB   '*'+128   
03FE   FF                     DB   DivSub&0ffh   
03FF   AF                     DB   '/'+128   


RAM_BASE:           0400 DEFINED AT LINE 370
                    > USED AT LINE 400
                    > USED AT LINE 404
                    > USED AT LINE 407
                    > USED AT LINE 408
                    > USED AT LINE 410
RAM_TOP:            0800 DEFINED AT LINE 371
                    > USED AT LINE 396
                    > USED AT LINE 397
INTEGERTOKEN:       0020 DEFINED AT LINE 377
                    > USED AT LINE 583
                    > USED AT LINE 806
                    > USED AT LINE 1019
                    > USED AT LINE 1789
                    > USED AT LINE 1816
QUESTIONMARKTOKEN:  0021 DEFINED AT LINE 378
                    > USED AT LINE 1199
                    > USED AT LINE 1916
STRINGTOKEN:        0022 DEFINED AT LINE 379
                    > USED AT LINE 1390
                    > USED AT LINE 1396
                    > USED AT LINE 1670
                    > USED AT LINE 1763
                    > USED AT LINE 1791
                    > USED AT LINE 1812
INPUT_BUFFER:       07F8 DEFINED AT LINE 396
                    > USED AT LINE 1455
STACK_INIT:         07F8 DEFINED AT LINE 397
                    > USED AT LINE 777
                    > USED AT LINE 1568
VAR_SPACE:          0400 DEFINED AT LINE 400
                    > USED AT LINE 1694
PROG_PTR:           0400 DEFINED AT LINE 404
                    > USED AT LINE 432
                    > USED AT LINE 785
                    > USED AT LINE 826
                    > USED AT LINE 892
PROG_PARSE_PTR:     043C DEFINED AT LINE 407
                    > USED AT LINE 793
                    > USED AT LINE 845
                    > USED AT LINE 1707
RNG_SEED:           043E DEFINED AT LINE 408
                    > USED AT LINE 1233
                    > USED AT LINE 1651
PROG_BASE:          0440 DEFINED AT LINE 410
                    > USED AT LINE 1520
                    > USED AT LINE 1731
                    > USED AT LINE 1795
PUTCHAR:            0008 DEFINED AT LINE 443
PUTCHARWAITLOOP:    000A DEFINED AT LINE 452
COMPAREJUMP_ENTRY:  0021 DEFINED AT LINE 502
                    > USED AT LINE 493
JZPAGE_SKIP:        0025 DEFINED AT LINE 505
                    > USED AT LINE 503
EXPAPPLYOP:         0026 DEFINED AT LINE 507
                    > USED AT LINE 630
                    > USED AT LINE 645
COMPAREHLDE:        0028 DEFINED AT LINE 516
NEGATEDE:           0030 DEFINED AT LINE 535
EXPEVALUATE:        0038 DEFINED AT LINE 559
EXPEVALUATENUM:     0038 DEFINED AT LINE 566
                    > USED AT LINE 679
EXPINTEGER:         0051 DEFINED AT LINE 592
EXPVAR:             0055 DEFINED AT LINE 599
                    > USED AT LINE 584
EXPVARGETVALUE:     0058 DEFINED AT LINE 603
EXPEVALUATEOP:      005B DEFINED AT LINE 608
                    > USED AT LINE 666
                    > USED AT LINE 733
SKIPEXPAPPLYOP:     006D DEFINED AT LINE 648
                    > USED AT LINE 620
EXPNEGATE:          0074 DEFINED AT LINE 662
                    > USED AT LINE 574
FORSUBIMPL:         0084 DEFINED AT LINE 681
                    > USED AT LINE 1480
FORWITHSTEP:        0095 DEFINED AT LINE 710
                    > USED AT LINE 707
EXPLEFTBRACE:       00A1 DEFINED AT LINE 729
                    > USED AT LINE 572
FUNCTIONCALL:       00A2 DEFINED AT LINE 731
                    > USED AT LINE 581
EXPBRACKETEDB:      00AA DEFINED AT LINE 745
                    > USED AT LINE 1702
ERROR:              00B3 DEFINED AT LINE 759
                    > USED AT LINE 578
                    > USED AT LINE 589
                    > USED AT LINE 692
                    > USED AT LINE 748
                    > USED AT LINE 836
                    > USED AT LINE 944
                    > USED AT LINE 1341
                    > USED AT LINE 1447
                    > USED AT LINE 1493
                    > USED AT LINE 1534
                    > USED AT LINE 1570
                    > USED AT LINE 1684
READY:              00BD DEFINED AT LINE 772
                    > USED AT LINE 1510
                    > USED AT LINE 1521
READYNONEWLINE:     00C3 DEFINED AT LINE 783
                    > USED AT LINE 861
                    > USED AT LINE 904
LINESTARTSWITHINT:  00DA DEFINED AT LINE 809
DELETEPROGRAMLINE:  00FB DEFINED AT LINE 857
                    > USED AT LINE 831
ENTRY:              010B DEFINED AT LINE 887
                    > USED AT LINE 855
MEMORYROTATE:       010F DEFINED AT LINE 894
REVERSEDH:          0119 DEFINED AT LINE 907
                    > USED AT LINE 902
REVERSE:            011C DEFINED AT LINE 912
                    > USED AT LINE 901
REVERSELOOP:        011C DEFINED AT LINE 916
                    > USED AT LINE 930
NLTESTTRUE:         012A DEFINED AT LINE 939
                    > USED AT LINE 971
GETLINE:            0132 DEFINED AT LINE 949
                    > USED AT LINE 789
GETLINENOPROMPT:    0135 DEFINED AT LINE 958
                    > USED AT LINE 1460
FRESHSTART:         0138 DEFINED AT LINE 963
                    > USED AT LINE 1133
                    > USED AT LINE 1646
NLTEST:             013B DEFINED AT LINE 967
                    > USED AT LINE 1129
NEXTCHARLOOP:       013F DEFINED AT LINE 973
                    > USED AT LINE 979
                    > USED AT LINE 1067
LOOKUPCLASSLOOP:    014D DEFINED AT LINE 994
                    > USED AT LINE 998
LC_QUOTETESTTRUE:   0153 DEFINED AT LINE 999
DIGITCLASS:         0158 DEFINED AT LINE 1010
                    > USED AT LINE 1642
DIGITCLASSEND:      015A DEFINED AT LINE 1014
WRITE_SHARED_ATSP:  0161 DEFINED AT LINE 1024
                    > USED AT LINE 1182
WRITE_SHARED:       0162 DEFINED AT LINE 1026
                    > USED AT LINE 1157
WRITE_SHARED_WRITTEN: 0163 DEFINED AT LINE 1028
                    > USED AT LINE 1201
NOCHARCLASS:        0165 DEFINED AT LINE 1032
                    > USED AT LINE 965
DIGITCLASSNOTEND:   016A DEFINED AT LINE 1040
                    > USED AT LINE 1012
QUOTECLASSEXPEND:   017C DEFINED AT LINE 1069
                    > USED AT LINE 943
                    > USED AT LINE 1133
QUOTECLASS:         017D DEFINED AT LINE 1083
                    > USED AT LINE 1644
LT0CLASS:           0180 DEFINED AT LINE 1098
                    > USED AT LINE 1643
                    > USED AT LINE 1645
COMPCLASS:          0182 DEFINED AT LINE 1103
                    > USED AT LINE 1641
ALPHACLASS:         0184 DEFINED AT LINE 1106
                    > USED AT LINE 1640
TOKENCLASSEND:      018F DEFINED AT LINE 1135
LOOKUPTOKEN_LOOP:   019E DEFINED AT LINE 1161
                    > USED AT LINE 1191
STRCMP:             01A1 DEFINED AT LINE 1165
                    > USED AT LINE 1173
LOOKUPTOKEN:        01AD DEFINED AT LINE 1186
                    > USED AT LINE 1190
ABSSUB:             01BA DEFINED AT LINE 1205
                    > USED AT LINE 580
                    > USED AT LINE 738
                    > USED AT LINE 1323
                    > USED AT LINE 1950
LEFTBRACETOKEN:     01BD DEFINED AT LINE 1218
                    > USED AT LINE 570
                    > USED AT LINE 747
                    > USED AT LINE 1963
USRSUB:             01BE DEFINED AT LINE 1221
                    > USED AT LINE 1952
RNDSUB:             01C0 DEFINED AT LINE 1226
                    > USED AT LINE 577
                    > USED AT LINE 1954
OPERATORS:          01CD DEFINED AT LINE 1239
                    > USED AT LINE 654
LTESUB:             01CD DEFINED AT LINE 1241
                    > USED AT LINE 1973
GTESUB:             01CE DEFINED AT LINE 1244
                    > USED AT LINE 1971
GTSUB:              01D1 DEFINED AT LINE 1248
                    > USED AT LINE 1977
LTSUB:              01D2 DEFINED AT LINE 1251
                    > USED AT LINE 1975
EQUALSUB:           01DB DEFINED AT LINE 1262
                    > USED AT LINE 1492
                    > USED AT LINE 1967
BINRETURN:          01DC DEFINED AT LINE 1264
                    > USED AT LINE 1247
NOTEQUALSUB:        01DE DEFINED AT LINE 1268
                    > USED AT LINE 1969
ADDSUB:             01E5 DEFINED AT LINE 1275
                    > USED AT LINE 676
                    > USED AT LINE 1979
SUBSUB:             01E6 DEFINED AT LINE 1277
                    > USED AT LINE 574
                    > USED AT LINE 1981
NEGATESUB:          01E7 DEFINED AT LINE 1279
                    > USED AT LINE 629
MULSUB:             01EB DEFINED AT LINE 1287
                    > USED AT LINE 1235
                    > USED AT LINE 1983
MULTIPLY:           01EE DEFINED AT LINE 1294
MULLOOP:            01F0 DEFINED AT LINE 1297
                    > USED AT LINE 1307
DONTADD:            01F8 DEFINED AT LINE 1304
                    > USED AT LINE 1302
DIVSUB:             01FF DEFINED AT LINE 1313
                    > USED AT LINE 1985
DIVIDEHL:           01FF DEFINED AT LINE 1319
                    > USED AT LINE 1658
                    > USED AT LINE 1878
DIVJZERROR:         020A DEFINED AT LINE 1340
DIVLOOP:            020D DEFINED AT LINE 1343
                    > USED AT LINE 1349
DIVNORESTORE:       021B DEFINED AT LINE 1364
                    > USED AT LINE 1358
LINENUMSUB:         0223 DEFINED AT LINE 1377
                    > USED AT LINE 843
                    > USED AT LINE 1529
                    > USED AT LINE 1533
                    > USED AT LINE 1538
                    > USED AT LINE 1783
                    > USED AT LINE 1814
PRINTSUB:           0226 DEFINED AT LINE 1382
                    > USED AT LINE 1918
PRINTSUBLOOP:       0226 DEFINED AT LINE 1383
                    > USED AT LINE 1420
PRINTSUBEXPRESSION: 0231 DEFINED AT LINE 1405
PRINTSUBSTRING:     0236 DEFINED AT LINE 1410
                    > USED AT LINE 1392
PRINTSUBEND:        0240 DEFINED AT LINE 1425
                    > USED AT LINE 1403
CRLF:               0241 DEFINED AT LINE 1428
                    > USED AT LINE 760
                    > USED AT LINE 779
                    > USED AT LINE 1847
GOSUBSUB:           0248 DEFINED AT LINE 1435
                    > USED AT LINE 1924
GOTOSUB:            024D DEFINED AT LINE 1443
                    > USED AT LINE 1922
INPUTSUB:           0255 DEFINED AT LINE 1450
                    > USED AT LINE 1928
POPHASSIGNTOVAR:    0264 DEFINED AT LINE 1467
                    > USED AT LINE 1497
FORSUB:             0269 DEFINED AT LINE 1479
                    > USED AT LINE 1930
LETSUB:             026D DEFINED AT LINE 1485
                    > USED AT LINE 1920
IFSUB:              027A DEFINED AT LINE 1500
                    > USED AT LINE 1934
ENDSUB:             0281 DEFINED AT LINE 1509
                    > USED AT LINE 1513
                    > USED AT LINE 1936
ENDPROGRAM:         0280 DEFINED AT LINE 1513
                    > USED AT LINE 791
                    > USED AT LINE 804
                    > USED AT LINE 830
                    > USED AT LINE 1780
                    > USED AT LINE 1801
EXECUTEPROGRAM:     0284 DEFINED AT LINE 1515
                    > USED AT LINE 430
                    > USED AT LINE 1940
EXECUTEPROGRAMLOOP: 0289 DEFINED AT LINE 1524
                    > USED AT LINE 727
                    > USED AT LINE 1546
EXECUTEDIRECT:      028A DEFINED AT LINE 1527
                    > USED AT LINE 807
NEWSUB:             029A DEFINED AT LINE 1559
                    > USED AT LINE 1944
LISTSUB:            029B DEFINED AT LINE 1562
                    > USED AT LINE 1942
RETURNSUB:          029E DEFINED AT LINE 1565
                    > USED AT LINE 1926
LASTSTATEMENT:      02A8 DEFINED AT LINE 1576
                    > USED AT LINE 1396
                    > USED AT LINE 1533
                    > USED AT LINE 1634
                    > USED AT LINE 1635
                    > USED AT LINE 1636
                    > USED AT LINE 1637
NEXTSUB:            02A8 DEFINED AT LINE 1577
                    > USED AT LINE 1932
NEXTSUBLOOP:        02C0 DEFINED AT LINE 1621
                    > USED AT LINE 1615
TOTOKEN:            02A9 DEFINED AT LINE 1634
                    > USED AT LINE 691
                    > USED AT LINE 1957
STEPTOKEN:          02AA DEFINED AT LINE 1635
                    > USED AT LINE 707
                    > USED AT LINE 1959
RIGHTBRACETOKEN:    02AB DEFINED AT LINE 1636
                    > USED AT LINE 753
                    > USED AT LINE 1965
COMMATOKEN:         02AC DEFINED AT LINE 1637
                    > USED AT LINE 1418
                    > USED AT LINE 1961
CLASSLOOKUP:        02C8 DEFINED AT LINE 1639
                    > USED AT LINE 986
RNDSUBIMPL:         02D6 DEFINED AT LINE 1648
                    > USED AT LINE 1236
OUTPUTSTRING:       02E3 DEFINED AT LINE 1665
                    > USED AT LINE 1411
OUTPUTSTRINGLOOP:   02E4 DEFINED AT LINE 1668
                    > USED AT LINE 1676
OUTPUTSTRING_WITHQUOTE: 02E8 DEFINED AT LINE 1673
                    > USED AT LINE 1899
GETVARLOCATIONBVAR: 02EB DEFINED AT LINE 1679
                    > USED AT LINE 1452
                    > USED AT LINE 1486
GETVARLOCATION:     02F0 DEFINED AT LINE 1686
                    > USED AT LINE 602
OUTPUTSTRINGRET:    02FE DEFINED AT LINE 1711
                    > USED AT LINE 1672
GETLINENUM:         02FF DEFINED AT LINE 1714
                    > USED AT LINE 824
                    > USED AT LINE 1445
GETLINENUMLOOP:     0302 DEFINED AT LINE 1733
                    > USED AT LINE 1747
ATNLN_RETNZ:        0312 DEFINED AT LINE 1754
                    > USED AT LINE 1780
ATNLN_STRING:       0314 DEFINED AT LINE 1761
                    > USED AT LINE 1764
                    > USED AT LINE 1791
ATNLN_INT:          031A DEFINED AT LINE 1767
                    > USED AT LINE 870
                    > USED AT LINE 1789
ATNLN_INXB:         031B DEFINED AT LINE 1769
                    > USED AT LINE 1734
ADVANCETONEXTLINENUM: 031C DEFINED AT LINE 1772
                    > USED AT LINE 1507
                    > USED AT LINE 1792
LISTSUBIMPL:        032D DEFINED AT LINE 1794
                    > USED AT LINE 1563
LISTLOOP:           0330 DEFINED AT LINE 1796
                    > USED AT LINE 1804
LIST_TOKEN_LOOP:    0348 DEFINED AT LINE 1823
                    > USED AT LINE 1827
                    > USED AT LINE 1834
LIST_TOKEN:         034E DEFINED AT LINE 1829
LIST_TOKEN_STRING_LOOP: 0353 DEFINED AT LINE 1836
                    > USED AT LINE 1842
LIST_LINENUM:       035D DEFINED AT LINE 1846
                    > USED AT LINE 1814
LIST_INTEGER:       0360 DEFINED AT LINE 1849
                    > USED AT LINE 1816
PRINTINTEGER:       0366 DEFINED AT LINE 1859
                    > USED AT LINE 764
                    > USED AT LINE 1407
PRINTINTEGERLOOP:   0371 DEFINED AT LINE 1871
                    > USED AT LINE 1866
                    > USED AT LINE 1889
PRINTINTEGERLOOP2:  0381 DEFINED AT LINE 1891
                    > USED AT LINE 1896
LIST_STRING:        0386 DEFINED AT LINE 1898
                    > USED AT LINE 1812
LIST_VAR:           038A DEFINED AT LINE 1902
                    > USED AT LINE 1818
TOKENLIST:          038E DEFINED AT LINE 1915
                    > USED AT LINE 1159
                    > USED AT LINE 1808