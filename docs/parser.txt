# This is an attempt to write
# a pseudo-code version of the
# in-place parser for 1K Tiny 
# BASIC - a parser that doesn’t
# need a separate input buffer.
#
# As characters are entered and
# processed, tokens are output directly
# into the area immediately after where
# the program is stored. 
# (then later on either executed
# directly from there or 'MemoryRotated'
# into the right location in the program)
#
# This has the disadvantage tnat
# you can't delete characters, but
# advantages are that line length is
# limited only by available RAM, and
# no separate input buffer space is
# needed in RAM
#
# The inability to delete is mitigated
# by preventing the user from overwriting
# a program line - the line must be
# explicitly deleted first. Also, some
# terminals have a 'line at a time' mode, 
# where editing of a line happens in the
# terminal before sending the line.

class=NoClass
c=anything except newline

while True:
  if c==NewLine:
    if class=QuoteClassExpEnd:
      # unterminated string
      error
    return

  c=GetChar()

  newClass=LookUpClass(c)

  class(newClass<>class)

LookupClass(c):
  return one of:
  DigitClass
  QuoteClass # the " character
  CompClass # includes < = > chars 
  LT0Class # characters less than '0'
  AlphaClass

NoClass(same):
  parseState=0
  class=newClass
  class(True)

DigitClass(same):
  if same:
    parseState=parseState*10+(c-‘0’)
  else:
    Output(intToken,parseState)
    NoClass(false)

# These are all closely related 
# and intertwined in assembly.
QuoteClass(same):
  class=QuoteClassExpEnd

QuoteClassExpEnd(same):
  Output(c)
  if c=quote:
    NoClass(false)

CompClass(same):
  # fall through
LT0Class(same):
  # For this character class, which
  # includes + - * / ( )
  # every single character is a token
  # to be looked up. Setting class
  # to a different value (one byte ahead)
  # guarantees that this will happen.

  class=LT0ClassHadOne
  # fall through
LT0CladsHadOne(same):
  # fall through

AlphaClass(same):
  # output c regardless of same - this
  # means that when character class
  # changes we will write a character
  # from a different class. This is
  # good because it means thst
  # LookupToken will definitely stop
  # when it reaches that character
  Output(c)

  # keep track of number of characters
  # by decrementing because we want to
  # use this to get back to the start of
  # the sequence of characters and 8080
  # has no 16-bit subtract
  parseState=parseState-1

  if same:
    return
  else:
    if parseState=-2 and
      c between '@' and '_':
      # variable token
      output(c-'@')
      NoClass(false)
    else:
      Do a token Lookup of the last 
      -parseState chars in the in-place
      buffer and output the token.
      Error if token not found.

