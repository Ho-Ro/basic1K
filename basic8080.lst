0000                          ; Will Stevens
0000                          ; 25th Feb 2023
0000                          ; 1K 8080 BASIC
0000                          ; 
0000                          ; Post-assembly checklist
0000                          ; 
0000                          ; 1. LineNumSub is >= address 223h
0000                          ; 2. DivSub is at address 2xxh (i.e. <= 2ffh)
0000                          ; 3. Program does not exceed 1k
0000                          ; 4. In ClassLookup, check that QuoteClass
0000                          ;    has LSB different from othet class subs
0000                          ; 
0000                          ; 2023-03-03 About 450 bytes long
0000                          ; 2023-03-08 About 750 bytes long
0000                          ; 2023-03-11 About 840 bytes long
0000                          ; 2023-03-12 About 930 bytes long.
0000                          ;   String tokens added.
0000                          ;   * and / yet to be added.
0000                          ;   Some scope for size optimization.
0000                          ; 2023-03-12 About 940 bytes long
0000                          ;		* added
0000                          ;		some reduction in code size done
0000                          ; 2023-03-16 About 970 bytes long
0000                          ;   unsigned / and integer output added
0000                          ;		about 30 bytes could be saved
0000                          ;		by using RST in place of call
0000                          ;   in some places
0000                          ; 2023-03-17 About 940 bytes long
0000                          ; 2023-03-17 About 970 bytes long
0000                          ;		INPUT added
0000                          ; 2023-03-19 About 960 bytes long
0000                          ;    some bug fixes
0000                          ;		 capable of playing lunar lander
0000                          ; 2023-03-22 About 970 bytes long
0000                          ;		 signed / added
0000                          ; 2023-03-24 About 950 bytes long
0000                          ;		 more code size reductions
0000                          ;		 signed integer parsing supported
0000                          ; 2023-03-24 About 940 bytes long
0000                          ;    more code size reductions
0000                          ; 2023-03-27 About 950 bytes long
0000                          ;		 simplified operator calling and
0000                          ;		 simplified a few operators
0000                          ;		 working on memory rotate function needed
0000                          ;		 for line deletion and insertion
0000                          ; 2023-04-09 About 970 bytes long.
0000                          ;		 more code size reductions
0000                          ;		 first draft of memory rotate function added
0000                          ; 2023-04-12 About 995 bytes long
0000                          ;		 line deletion function more complete
0000                          ;		 looking for better way of decreasing
0000                          ;		 PROG_PTR after line deletion
0000                          ; 2023-04-16 About 986 bytes long
0000                          ;    line deletion apparently working
0000                          ;    some code size reductions
0000                          ; 2023-04-16 About 963 bytes long
0000                          ;			further code size reductions
0000                          ; 2023-04-17 About 930 bytes long
0000                          ;			looked for subroutine code sharing and
0000                          ;			LXI trick optimisations.
0000                          ;			Likely that some bugs will have been
0000                          ;			introduced when doing this
0000                          ; 2023-04-18 About 900 bytes long
0000                          ;			greatly reduced CharClass size
0000                          ; 2023-04-20 About 880 bytes long
0000                          ;			more code size reduction
0000                          ; 2023-04-23 About 970 bytes long
0000                          ;			first draft of code for LIST added
0000                          ; 2023-04-25 About 970 bytes long
0000                          ;			LIST command working
0000                          ; 2023-04-27 About 950 bytes long
0000                          ;			More code size reduction
0000                          ; 2023-04-28 About 950 bytes long
0000                          ;			used RST_CompareJump to save
0000                          ;			2 bytes for every CPI JZ where
0000                          ;			the jump is to same page
0000                          ; 2023-04-28 Free space: 78 bytes
0000                          ; 2023-04-29 Free space: 84 bytes
0000                          ;			Initialise PROG_PTR at start
0000                          ;			Added NEW and END
0000                          ;			Added direct statement handling
0000                          ; 2023-04-30 Free space: 86 bytes
0000                          ;			Fixed bugs with deleting first and
0000                          ;			last program lines
0000                          ; 2023-05-02 Free space: about 60 bytes
0000                          ;			added code to allow out-of-order
0000                          ;			line number entry (first draft)
0000                          ; 2023-05-02 Free space: about 54 bytes
0000                          ;			all basic functionality now implemented
0000                          ;			items to improve:
0000                          ;			division
0000                          ;			syntax checking
0000                          ; 2023-05-04 Free space: about 79 bytes
0000                          ;			more code size reduction
0000                          ;			partly through handling EndProgram
0000                          ;			and LineNum better in threaded code
0000                          ;			likely to have introduced bugs
0000                          ; 2023-05-07 Free space: about 69 bytes
0000                          ;			Improved expression evaluation by
0000                          ;			making it recursively callable
0000                          ;			and no longer requiring operator stack
0000                          ;			and about 20 bytes shorter.
0000                          ;			Used freed space for more syntax checks
0000                          ; 2023-05-08 Free space: about 44 bytes
0000                          ;			First draft of support for array var @
0000                          ; 2023-05-17 Free space: About 100 bytes
0000                          ;			First draft of new parser from
0000                          ;			experiments/parsing3.asm.
0000                          ;			Still need to modify string representation
0000                          ;			and change how INPUT parses integer,
0000                          ;			and check string token doesn't interfere
0000                          ;			after TokenList, and check order in
0000                          ;			TokenList.
0000                          ;			Seems likely that enough space has been
0000                          ;			freed to be able to implement FOR...NEXT
0000                          ; 2023-05-19 Free space: About 101 bytes
0000                          ;			Issues listed above have been addressed now
0000                          ;			Testing needed to iron out problems
0000                          ; 2023-05-26 Free space: About 84 bytes
0000                          ;			various bug fixes
0000                          ;			PRINT allows comma at end to suppress
0000                          ;			newline.
0000                          ;			Show > prompt symbol when ready.
0000                          ; 2023-05-27 Free space: About 17 bytes
0000                          ;			Added FOR NEXT (no STEP yet)
0000                          ;			Need more space
0000                          ; 2023-05-27 Free space: About 36 bytes
0000                          ;			Made a few small byte savings, and put
0000                          ;			token subs onto page 2 so that last one
0000                          ;			can flow onto page 3, freeing some space
0000                          ;			in page 2 to avoid having to jump out.
0000                          ;			One TODO to action
0000                          ; 2023-05-28 Free space: About 42 bytes
0000                          ; 2023-05-29 Free space: About 53 bytes
0000                          ;			Made some changes to * and / which I hope
0000                          ;			are improvements (efficienxy + code size)
0000                          ;			but testing needed to confirm this.
0000                          ; 2023-06-02 Free space: About 12 bytes
0000                          ;			Added support for STEP to FOR loops
0000                          ;			Noted where Z flag is in known state
0000                          ;			in JMP instructions, because there is
0000                          ;			potential space saving by having
0000                          ;			2-byte in-page JMP, JNZ or JZ,
0000                          ;			code shared with RST_CompareJump
0000                          ; 2023-06-03 Free space: About 10 bytes
0000                          ;			STEP works in +ve direction only
0000                          ;			Fixing will require more space
0000                          ;			Would also like to add ABS, RND, USR
0000                          ;			But probably need about 60 bytes for that
0000                          ; 2023-06-03 Free space: About 19 bytes
0000                          ;			Added in-page JZ to free up space
0000                          ;			Likely to have introduced errors
0000                          ; 2023-06-04 Free space: About 25 bytes
0000                          ;			Shortened PrintSub
0000                          ; 2023-06-04 Free space: about -21 bytes
0000                          ;			Implementing ABS and USR and skeleton
0000                          ;		  of RND makes it 21 bytes over budget.
0000                          ;			So it seems reasonable to think that
0000                          ;			space can be made for these.
0000                          ; 2023-06-05 Free space: about -15 bytes
0000                          ; 2023-06-19 Free space: about 6 bytes
0000                          ;			Replaced memory rotate with triple reversal
0000                          ;			algorithm. Back below size limit, but need
0000                          ;		  to rearrange things to realize this.
0000                          ; 2023-06-22 Free space: about 10 bytes
0000                          ;			All free space is in the RST area, which I
0000                          ;     am reluctant to use because I expect that
0000                          ;			when I try to target actual hardware I will
0000                          ;			need to extend PutChar, and maybe have
0000                          ;			some initialization code for e.g. UART.
0000                          ;			So discounting this I am 2 bytes over
0000                          ;			budget, and haven't implemented RND
0000                          ;			function yet
0000                          ; 2023-06-23 Free space : 18 bytes
0000                          ;			Saved space with more sharing between
0000                          ; 		LET and INPUT
0000                          ;			Ready to do a lot of testing
0000                          ; 2023-06-28 Free space : 20 bytes
0000                          ; 2023-06-28 Free space : 19 bytes
0000                          ;			Fixed enough bugs that lunar lander works
0000                          ;			Function calls don't work yet
0000                          ; 2023-07-01 Free space : 24 bytes
0000                          ;			ABS function works
0000                          ;			RND function currently does nothing
0000                          ;			need to make implementation of RND
0000                          ;			that fits in 17 bytes
0000                          ; 2023-07-04 Free space : 20 bytes
0000                          ;			Implemented simple lookup-based RND
0000                          ;			replaced newline RST with LDAX B, INX B
0000                          ;			saved a few bytes in LIST
0000                          ; 2023-07-05 Free space : 11 bytes
0000                          ;			Implemented XORSHIFT RND function
0000                          ; 2023-07-08 Free space: 10 bytes
0000                          ; 2023-07-12 Free space: 15 bytes
0000                          ;			Fixed forgotten issue where STEP in FOR
0000                          ;			loop didn't work if negative
0000                          ; 2023-07-13 Free space: 13 bytes
0000                          ;			Extended variable range up to 32
0000                          ;			So that user has 31 variables and array
0000                          ;			var 30 can be used to work out
0000                          ;			remaining memory
0000                          ;			var 31 is RNG seed
0000                          ; 2023-07-15 Noticed bug where -32768 isn't
0000                          ;     displayed
0000                          ; 2023-07-15 When playing REVERSE, saw corrupted
0000                          ;			array, which implies that bug where stack
0000                          ;			continually growing
0000                          ; 2023-07-16 Above two issues fixed. Former
0000                          ;     required change to PrintInteger. Latter
0000                          ;			was due to a GOTO from within FOR loop,
0000                          ;			in REVERSE and not necessarily a problem
0000                          ;			with this interpreter
0000                          ; 2024-01-01 Fixed bug where parse error wasn't
0000                          ;     displayed as ? during LIST
0000                          ; 2024-01-28 Fixed bug where @ was displayed as M
0000                          ;     during LIST
0000                          ; 2024-02-07 Working on corrections to comparison
0000                          ;     operators. Not in working state. Made I/O
0000                          ;     compatible with Dick Whipple's Front Panel
0000                          ;     8080 simulator
0000                          ; 2024-02-08 May have fixed comparison operator
0000                          ;     problem. Need to save 2 bytes to be able to
0000                          ;     test it
0000                          ; 2024-02-08 Reclaimed some space so that 3FEh is
0000                          ;     the last byte uses. Free space 5 bytes.
0000                          ; 2024-02-18 Worked towards reclaiming 4 bytes in
0000                          ;     the tokenizer. Good chance of being
0000                          ;     incorrect, will require debugging.
0000                          ; 2024-02-20 Debugged above changes and
0000                          ;     they seem okau. Free space 9 bytes
0000                          ; 2024-02-22 Rearranged RSTs and added CPI to end
0000                          ;     of RST_LDAXB_INXB_CPI to save memory.
0000                          ;     Free space still 9 bytes but now
0000                          ;     7 of those are at the end of 1K, so are
0000                          ;     easy to make use of.
0000                          ;     Need to check movement and alignment
0000                          ;     of subroutines.
0000                          ;     It would be useful to have a checklist of
0000                          ;     all dependencies that need to be checked
0000                          ;     when there are large movements in memory.
0000                          ; 
0000                          ;     Next things to do:
0000                          ;     - unterminated string check
0000                          ;     - forbidding excess chars in tokens
0000                          ;     - correct operator precedence for * /
0000                          ;     - error on divide by zero
0000                          ;     not sure whether all 4 can be done in
0000                          ;     only 7 bytes
0000                          ; 2024-02-25 Added unterminated string check and
0000                          ;     didvide by zero error. 2 bytes over budget.
0000                          ; 2024-02-25 Realised that removing reatriction
0000                          ;     that RUN, LIST and NEW only allowed in
0000                          ;     direct mode would will probably save a
0000                          ;     sufficient number of bytes to finish all
0000                          ;     outstanding work
0000                          ; 2024-02-28 Sveral changes related to issues
0000                          ;     listed above, Divide by zero and
0000                          ;     unterminated string now generate error
0000                          ;     messages. 2 bytes free which should be
0000                          ;     enough to make * and / equal precedence,
0000                          ;     but will test everything else first. Issue
0000                          ;     about tokens with excess chars not being
0000                          ;     detected as errors will remain unfixed in
0000                          ;     first release.
0000                          ; 2024-03-01 Found bug where recent changes
0000                          ;     caused DeleteProgramLine to move page.
0000                          ;     In the course of fixing it, may have saved
0000                          ;     5 bytes. Need to test that fix is correct.
0000                          ; 2024-03-01 Fixed a bug introduced on 28 Feb
0000                          ;     where ExecuteDirect was called without
0000                          ;     setting B. Wrote 'game of life' example
0000                          ;     program. When printing newline, added CR
0000                          ;     before after discovering that some
0000                          ;     terminals need this. Need to free up
0000                          ;     1 byte to fix operator precedence issue
0000                          ; 2024-03-02 This version correcly runs
0000                          ;     lander.bas, reverse.bas, life.bas,
0000                          ;     operatortests.bas, operatortests2.bas,
0000                          ;     looptests.bas
0000                          ; 2024-03-02 Freed up 1 byte by removing
0000                          ;     redundant STC
0000                          ; 2024-03-03 Added code to make * same
0000                          ;     precedence as / (needs testing).
0000                          ;     Changed RNG from XORSHIFT to LCG.
0000                          ;     This saved 3 bytes.
0000                          ;     Need to experiment with LCG constant
0000                          ;     for best RNG performance.
0000                          ;     Behaviour of RNG function changed so
0000                          ;     that max valid input parameter is 256,
0000                          ;     because low order bits of RNG have
0000                          ;     low period. Only high ordet bits of
0000                          ;     RNG are used for return value.
0000                          ; For development purposes assume we have
0000                          ; 1K ROM from 0000h-03FFh containing BASIC
0000                          ; 1K RAM from 0400h-07FFh
0000                RAM_BASE:   EQU   0400h   
0000                RAM_TOP:   EQU   0800h   
0000                          ; Token values
0000                          ; 0-31 are variables (0 = @)
0000                          ; IntegerToken must be one more than last var
0000                INTEGERTOKEN:   EQU   32   
0000                QUESTIONMARKTOKEN:   EQU   33   
0000                STRINGTOKEN:   EQU   34   
0000                          ; Callable tokens are low byte of subroutine to call
0000                          ; Errors are displayed as Ex where x is an error
0000                          ; code which is tbe address on the stack when
0000                          ; Error subroutine is called.
0000                          ; Input buffer is just 8 bytes long
0000                          ; used by input statement to get an integer.
0000                          ; If there is a buffer overflow because user
0000                          ; enters too much, the behaviour is system
0000                          ; dependent - e.g. if writes above RAM
0000                          ; space do nothing then its not a problem.
0000                          ; If memory space repeats and lower 1K
0000                          ; is ROM then also not much of a problem.
0000                INPUT_BUFFER:   EQU   RAM_TOP-8   
0000                STACK_INIT:   EQU   RAM_TOP-8   
0000                          ; this must be on a 256 byte boundary
0000                VAR_SPACE:   EQU   RAM_BASE   
0000                          ; 30 words, first of which is not
0000                          ; accessible to user, so can be
0000                          ; used for PROG_PTR
0000                PROG_PTR:   EQU   RAM_BASE   
0000                          ; 2 words accessible to user as variables
0000                          ; 30 and 31 (^ and _)
0000                PROG_PARSE_PTR:   EQU   RAM_BASE+60   
0000                RNG_SEED:   EQU   RAM_BASE+62   
0000                PROG_BASE:   EQU   RAM_BASE+64   
0000                          .ORG   00h   
0000                          ; I would like this to be:
0000                          ; LXI H,PROG_BASE
0000                          ; SHLD PROG_PTR
0000                          ; JMP Ready
0000                          ; 
0000                          ; But this doesn't fit in 8 bytes.
0000                          ; Instead we find a place in the program
0000                          ; that has LXI B,PROG_BASE, and set SP to that
0000                          ; address, the POP H from the stack and
0000                          ; store it in PROG_PTR, then INX SP means
0000                          ; that when we fall through to PutChar,
0000                          ; the RET will jump to Ready
0000                          ; 
0000                          ; (It means that on reset and NEW a char
0000                          ; will be output that depends on the value of
0000                          ; A at the time, but worth it to save several
0000                          ; bytes)
0000   31 88 02               LXI   SP,ExecuteProgram+2   
0003   E1                     POP   H   
0004   22 00 04               SHLD   PROG_PTR   
0007   33                     INX   SP   
0008                          .ORG   08h   
0008                          ; PutChar is called frequently
0008                          ; PutChar must return with Z set
0008                PUTCHAR:   
0008                          ; port 2 is for char I/O
0008   D3 02                  OUT   2   
000A                PUTCHARWAITLOOP:   ; address 000ah
000A                          ; TODO change these fee instructions
000A                          ; if targetting hardware
000A   AF                     XRA   A   
000B   C9                     RET   
000C                          ;IN 1
000C   E6 40                  ANI   040h   
000E   C8                     RZ   
000F   C3                     DB   0c3h   ; opcode for JMP
0010                          ; the following two bytes are
0010                          ; 0ah and 00h, so this jumps to
0010                          ; PutCharWaitLoop
0010                          ; 
0010                          .ORG   10h   
0010   0A                     LDAX   B   ; opcode 0ah
0011   00                     NOP   ; opcode 00h
0012   03                     INX   B   
0013   E3                     XTHL   
0014   BE                     CMP   M   
0015   23                     INX   H   
0016   E3                     XTHL   
0017   C9                     RET   
0018                          ; 
0018                          .ORG   18h   
0018                          ; byte after RST is compared with A
0018                          ; if equal then jump to address on same page.
0018                          ; 
0018                          ; only use where performance is not
0018                          ; important (parsing, printing)
0018   E3                     XTHL   
0019   BE                     CMP   M   
001A   23                     INX   H   
001B   C3 21 00               JMP   CompareJump_Entry   
001E                          ; 
001E                          ; 2 bytes free
0020                          .ORG   20h   
0020   E3                     XTHL   
0021                COMPAREJUMP_ENTRY:   
0021   C2 25 00               JNZ   JZPage_Skip   
0024   6E                     MOV   L,M   
0025                JZPAGE_SKIP:   
0025   23                     INX   H   
0026                EXPAPPLYOP:   ; shared code
0026   E3                     XTHL   
0027   C9                     RET   
0028                          .ORG   28h   
0028                COMPAREHLDE:   
0028                          ; compare HL and DE, return
0028                          ; Z equal, NZ if not equal
0028                          ; C equal, NC if not equal
0028                          ; A will be zero if Z is set
0028   7D                     MOV   A,L   
0029   AB                     XRA   E   
002A   C0                     RNZ   
002B   7C                     MOV   A,H   
002C   AA                     XRA   D   
002D   C0                     RNZ   
002E   37                     STC   
002F   C9                     RET   
0030                          .ORG   30h   
0030                NEGATEDE:   
0030                          ;flags are not affected
0030                          ; 
0030                          ; decrement and invert so that we end
0030                          ; up with D in A - sometimes handy
0030   1B                     DCX   D   
0031   7B                     MOV   A,E   
0032   2F                     CMA   
0033   5F                     MOV   E,A   
0034   7A                     MOV   A,D   
0035   2F                     CMA   
0036   57                     MOV   D,A   
0037   C9                     RET   
0038                          .ORG   38h   
0038                          ; BC points to program
0038                          ; DE contains value
0038                          ; Stack is used for both operands and
0038                          ; operators
0038                EXPEVALUATE:   
0038                          ; This puts a marker on the stack to
0038                          ; detect when there are operators on the
0038                          ; stack - operators all have 2 as the hi byte
0038                          ; but this call puts hi byte 0 on the stack
0038   CD 3F 00               CALL   ExpEvaluateNum   
003B   D4 D3 00               CNC   Error   
003E   C9                     RET   
003F                          ; ExpEvaluateNum must always be called
003F                          ; from page 0
003F                EXPEVALUATENUM:   
003F                          ; Expecting ( var integer or - sign
003F                          ; or function call
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
003F   D7 RST   2   
0040   A8                     DB   LeftBraceToken&0ffh   
        **MACRO UNROLL - RST_JZPAGE
0041   E7 RST   4   
0042   C0                     DB   (ExpLeftBrace&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
0043   DF RST   3   
0044   DB 73                  DB   SubSub&0xff,(ExpNegate&0ffh)-1   
0046                          ; 
0046                          ; last function
0046   FE AC                  CPI   (RndSub+1)&0ffh   
0048   D0                     RNC   ; if its greater than this, its an error
0049                          ; first function
0049   FE A5                  CPI   AbsSub&0ffh   
004B   D2 C2 00               JNC   FunctionCall   ; between RndSub and AbsSub
004E                          ; 
004E                          ; can't use RST_CompareJump below
004E                          ; because it doesn't preserve Carry after
004E                          ; comparison.
004E                          ; TODO - this assumption isn't correct - INX H
004E                          ; doesnt affect flags
004E                          ; 
004E   FE 20                  CPI   IntegerToken   
0050   DA 58 00               JC   ExpVar   
0053                          ; 
0053                          ; Integer token is one more than last var
0053                          ; token so if carry is set then it is a var
0053                          ; 
0053   C0                     RNZ   : return with carry clear if error   
0054                          ; Fall through to ExpInteger
0054                EXPINTEGER:   
0054   60                     MOV   H,B   
0055   69                     MOV   L,C   
0056   03                     INX   B   
0057   03                     INX   B   
0058                          ; 
0058                          ; fall through with carry clear
0058                EXPVAR:   
0058                          ; carry set if jumped to here
0058                          ; 
0058   DC AA 00               CC   GetVarLocation   
005B                EXPVARGETVALUE:   
005B   5E                     MOV   E,M   
005C   23                     INX   H   
005D   56                     MOV   D,M   
005E                EXPEVALUATEOP:   
005E                          ;Expecting operator or right bracket or
005E                          ;end of expression
005E                          ; 
005E                          ;Are there operators on the stack?
005E   E1                     POP   H   
005F                          ; 
005F                          ; H will be 0 if no operators on
005F                          ; stack (i.e. high byte of return address)
005F                          ; 
005F   7C                     MOV   A,H   
        **MACRO UNROLL - RST_COMPAREJUMP
0060   DF RST   3   
0061   00 6C                  DB   0,(SkipExpApplyOp&0ffh)-1   
0063                          ; 
0063                          ; if L is equal to MulSub then apply it.
0063                          ; this gives * same precedence as /
0063   7D                     MOV   A,L   
        **MACRO UNROLL - RST_COMPAREJUMP
0064   DF RST   3   
0065   DF 25                  DB   (MulSub&0ffh),(ExpApplyOp&0ffh)-1   
0067                          ; 
0067   0A                     LDAX   B   
0068                          ; 
0068                          ; No longer needed since case below
0068                          ; includes this
0068                          ;CPI Operators&0ffh
0068                          ; Is it the end of the expression?
0068                          ;JC ExpApplyOp
0068                          ; 
0068                          ; Does operator on stack have GTE precedence?
0068                          ; (or end of expression, when A < operators)
0068   3D                     DCR   A   
0069   BD                     CMP   L   
006A                          ; 
006A   DA 26 00               JC   ExpApplyOp   ; apply the operator
006D                          ; that was on the stack
006D                          ; 
006D                SKIPEXPAPPLYOP:   
006D   E5                     PUSH   H   ; put operator that was on stack
006E                          ; back onto stack
006E                          ; 
006E   0A                     LDAX   B   
006F                          ; 
006F   FE C2                  CPI   Operators&0ffh   
0071                          ; Is it the end of the expression?
0071   D8                     RC   
0072                          ; 
0072   03                     INX   B   
0073                          ; 
0073                          ; Code shared with ExpNegate
0073                          ; so use a CPI to mop up the initial
0073                          ; LXI in ExpNegate
0073                          ; 
0073   FE                     DB   0feh   ; OpCode for CPI to mop up LXI
0074                EXPNEGATE:   
0074                          ; Put 0 onto stack and - onto
0074                          ; operator stack
0074   11 00 00               LXI   D,0   
0077                          ; 
0077   21 5E 00               LXI   H,ExpEvaluateOp   ; address to return to
007A                          ; after operator is called
007A   E5                     PUSH   H   
007B                          ; 
007B   D5                     PUSH   D   ; operand
007C   6F                     MOV   L,A   ; operator address
007D   26 02                  MVI   H,PrintSub/256   
007F   E5                     PUSH   H   
0080                          ; 
0080   C3 3F 00               JMP   ExpEvaluateNum   
0083                PRINTSUBSTRING:   
0083   CD B9 00               CALL   OutputString   ; carry is clear on return
0086                PRINTSUBINTEGER:   ; carry is set on jump to here
0086   DC 8C 01               CC   PrintInteger   ; carry is clear on return
0089                          ; 
0089   11                     DB   11h   ; LXI D eats 2 bytes
008A                PRINTSUBLOOP:   
008A   37                     STC   
008B   03                     INX   B   
008C   D1                     POP   D   ; discard, since we are about to push again
008D                          ; 
008D                PRINTSUBIMPL:   
008D                          ; First time called, carry is clear
008D                          ; Subsequent times carry is clear unless
008D                          ; last token was a comma
008D   F5                     PUSH   PSW   
008E                          ; 
008E   0A                     LDAX   B   
008F                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
008F   DF RST   3   
0090   22 82                  DB   StringToken,(PrintSubString&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
0092   DF RST   3   
0093   A3 89                  DB   CommaToken,(PrintSubLoop&0ffh)-1   
0095                          ; must be called from page 0
0095   CD 3F 00               CALL   ExpEvaluateNum   
0098   DA 86 00               JC   PrintSubInteger   
009B   0B                     DCX   B   
009C                          ; 
009C                          ; Finished, we want to print a newline unless
009C                          ; last one was a comma
009C   F1                     POP   PSW   
009D   D8                     RC   ; return without newline if it was comma
009E                CRLF:     
009E   3E 0D                  MVI   A,13   
        **MACRO UNROLL - RST_PUTCHAR
00A0   CF RST   1   
00A1   3E 0A                  MVI   A,10   
        **MACRO UNROLL - RST_PUTCHAR
00A3   CF RST   1   
00A4   C9                     RET   
00A5                GETVARLOCATIONBVAR:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
00A5   D7 RST   2   
00A6                          ; Test that we have a var
00A6   20                     DB   32   
00A7   D4 D3 00               CNC   Error   
00AA                GETVARLOCATION:   
00AA                          ; A should contain a var token
00AA                          ; and B points to tbe location after
00AA                          ; the var token
00AA                          ; return with var address in HL
00AA                          ; and B pointing to next char
00AA                          ; A will never be 255 on return
00AA   26 04                  MVI   H,VAR_SPACE/256   
00AC   87                     ADD   A   
00AD   6F                     MOV   L,A   
00AE                          ; 
00AE   C0                     RNZ   
00AF                          ; 
00AF                          ; fall through if it is array var
00AF                          ; 
00AF   CD CA 00               CALL   ExpBracketedB   
00B2                          ; 
00B2                          ; Now DE contains the array index
00B2                          ; Add it twice to get the offset
00B2                          ; 
00B2   2A 3C 04               LHLD   PROG_PARSE_PTR   
00B5   23                     INX   H   ; up 1 byte to avoid EndProgram marker
00B6   19                     DAD   D   
00B7   19                     DAD   D   
00B8                OUTPUTSTRINGRET:   ; shared code, nearest RET
00B8   C9                     RET   
00B9                          ; This 9 byte routine can be moved anywhere to
00B9                          ; fill holes
00B9                OUTPUTSTRING:   
00B9                          ;Pointer in B points to string token marker
00B9   03                     INX   B   
00BA                OUTPUTSTRINGLOOP:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
00BA   D7 RST   2   
00BB   22                     DB   StringToken   
        **MACRO UNROLL - RST_JZPAGE
00BC   E7 RST   4   
00BD   B7                     DB   (OutputStringRet&0ffh)-1   
00BE                OUTPUTSTRING_WITHQUOTE:   
        **MACRO UNROLL - RST_PUTCHAR
00BE   CF RST   1   
        **MACRO UNROLL - RST_JZPAGE
00BF   E7 RST   4   
00C0   B9                     DB   (OutputStringLoop&0ffh)-1   
00C1                EXPLEFTBRACE:   
00C1   0B                     DCX   B   
00C2                FUNCTIONCALL:   
00C2                          ; push return address
00C2   11 5E 00               LXI   D,ExpEvaluateOp   
00C5   D5                     PUSH   D   
00C6                          ; A contains the address to call on page 2
00C6                          ; push function address
00C6   6F                     MOV   L,A   
00C7   26 02                  MVI   H,PrintSub/256   
00C9   E5                     PUSH   H   
00CA                          ; 
00CA                          ; fall through
00CA                          ; This must be before Error so that it
00CA                          ; can fall through
00CA                EXPBRACKETEDB:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
00CA   D7 RST   2   
00CB   A8                     DB   LeftBraceToken&0ffh   
00CC   C4 D3 00               CNZ   Error   
        **MACRO UNROLL - RST_EXPEVALUATE
00CF   FF RST   7   
00D0                          ; 
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
00D0   D7 RST   2   
00D1   A2                     DB   RightBraceToken&0ffh   
00D2   C8                     RZ   
00D3                          ; 
00D3                          ; fall through
00D3                          ;Display error code and go back to line entry
00D3                ERROR:    
00D3   CD 9E 00               CALL   CRLF   
00D6   3E 45                  MVI   A,'E'   
        **MACRO UNROLL - RST_PUTCHAR
00D8   CF RST   1   
00D9   D1                     POP   D   
00DA   CD 8C 01               CALL   PrintInteger   
00DD                          ; 
00DD                          ; fall through
00DD                          ; 
00DD                READY:    
00DD                          ; Set stack pointer
00DD                          ; Do this every time to guard against
00DD                          ; GOSUB with no RETURN errors
00DD                          ; 
00DD   31 F8 07               LXI   SP,STACK_INIT   
00E0                          ; 
00E0   CD 9E 00               CALL   CRLF   
00E3                          ; 
00E3   2A 00 04               LHLD   PROG_PTR   
00E6   E5                     PUSH   H   ; push it because we need it after
00E7                          ; GetLine
00E7   CD 1D 03               CALL   GetLine   
00EA                          ; 
00EA   36 89                  MVI   M,EndProgram&0ffh   
00EC                          ; 
00EC   22 3C 04               SHLD   PROG_PARSE_PTR   
00EF   E1                     POP   H   
00F0                          ; 
00F0   E5                     PUSH   H   
00F1   C1                     POP   B   
00F2                          ; 
00F2   7E                     MOV   A,M   
00F3                          ; Regardless of which branch taken
00F3                          ; we need this marker here.
00F3                          ; This overwrites the token to execute,
00F3                          ; but we've already got that in A
00F3   36 89                  MVI   M,EndProgram&0ffh   
00F5                          ; 
00F5   FE 20                  CPI   IntegerToken   
00F7   C2 8E 02               JNZ   ExecuteDirect   
00FA                          ; 
00FA                LINESTARTSWITHINT:   
00FA                          ; Get the line number into DE
00FA   23                     INX   H   
00FB   5E                     MOV   E,M   
00FC   23                     INX   H   
00FD   56                     MOV   D,M   
00FE   23                     INX   H   
00FF                          ; 
00FF                          ; Is it an integer all by itself?
00FF                          ; If so then delete the line
00FF                          ; 
00FF                          ; call GetLineNum to find either the line, or
00FF                          ; pointer to next location in program after it
00FF                          ; 
00FF   66                     MOV   H,M   ; preserve M (GetLineNum doesn't touch H)
0100   CD B0 03               CALL   GetLineNum   
0103   7C                     MOV   A,H   
0104   2A 00 04               LHLD   PROG_PTR   
0107   F5                     PUSH   PSW   
0108                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
0108   DF RST   3   
0109   89                     DB   EndProgram&0ffh   
010A   1A                     DB   (DeleteProgramLine&0ffh)-1   
010B                          ; 
010B   F1                     POP   PSW   
010C                          ; if GetLineNum returns a match then this is
010C                          ; an error, user must delete line first
010C   CC D3 00               CZ   Error   
010F                          ; 
010F                          ; do a memory rotate with
010F                          ; first = GetLine/ATNLN address
010F                          ; middle = PROG_PTR
010F                          ; last = PROG_PARSE_PTR
010F                          ; 
010F   36 27                  MVI   M,LineNumSub&0ffh   ; undo what we did earlier
0111   EB                     XCHG   
0112   2A 3C 04               LHLD   PROG_PARSE_PTR   
0115                          ; 
0115   E5                     PUSH   H   ; last
0116   C5                     PUSH   B   ; first
0117                          ; 
0117   D5                     PUSH   D   ; middle
0118                          ; 
0118   AF                     XRA   A   
0119                          ; 
        **MACRO UNROLL - RST_JZPAGE
0119   E7 RST   4   
011A   2A                     DB   (Entry&0ffh)-1   
011B                DELETEPROGRAMLINE:   
011B                          ; 25 bytes
011B   F1                     POP   PSW   
011C                          ; 
011C   C2 DD 00               JNZ   Ready   ; if line not found, do nothing
011F   E5                     PUSH   H   
0120   C5                     PUSH   B   ; first
0121   E5                     PUSH   H   ; last
0122                          ; 
0122   09                     DAD   B   ; HL=PROG_PTR+first
0123                          ; 
0123   03                     INX   B   
0124   CD CB 03               CALL   ATNLN_Int   ; Z is set when this is called
0127                          ; 
0127                          ;set HL to what we want PROG_PTR to be
0127   50                     MOV   D,B   
0128   59                     MOV   E,C   
        **MACRO UNROLL - RST_NEGATEDE
0129   F7 RST   6   
012A                          ; 
012A   19                     DAD   D   ; HL=PROG_PTR+first-middle
012B                          ; 
012B                          ; because DAD D above always causes HL
012B                          ; to decrease, it must set carry
012B                          ; so STC below is not needed
012B                          ;STC ; skip first reverse in memory rotate
012B                          ; because we don't care about the
012B                          ; line being deleted
012B                          ; 
012B                ENTRY:    
012B                          ; carry is clear if coming from insert
012B                          ; 
012B   C5                     PUSH   B   ; middle (or first)
012C   22 00 04               SHLD   PROG_PTR   
012F                          ; 
012F                MEMORYROTATE:   
012F                          ; 27 bytes
012F                          ; stack must contain (from top down)
012F                          ; first, middle, first, last
012F                          ; DE = middle
012F                          ; HL = Last
012F   D4 3C 01               CNC   Reverse   
0132   CD 39 01               CALL   ReverseDH   
0135   01 DD 00               LXI   B,Ready   
0138   C5                     PUSH   B   
0139                REVERSEDH:   
0139   E1                     POP   H   
013A   D1                     POP   D   
013B   E3                     XTHL   
013C                REVERSE:   
013C                          ; HL = last
013C                          ; DE = first
013C                REVERSELOOP:   
        **MACRO UNROLL - RST_COMPAREHLDE
013C   EF RST   5   
013D   C8                     RZ   
013E   2B                     DCX   H   
        **MACRO UNROLL - RST_COMPAREHLDE
013F   EF RST   5   
0140   C8                     RZ   
0141                          ; 
0141   46                     MOV   B,M   
0142   1A                     LDAX   D   
0143   77                     MOV   M,A   
0144   78                     MOV   A,B   
0145   12                     STAX   D   
0146   13                     INX   D   
0147                          ; 
0147   C3 3C 01               JMP   ReverseLoop   
014A                POPHASSIGNTOVAR_PREFIX:   
014A   E5                     PUSH   H   
014B                          ; 
014B   CD 1D 03               CALL   GetLine   
014E   C1                     POP   B   
        **MACRO UNROLL - RST_EXPEVALUATE
014F   FF RST   7   
0150   C1                     POP   B   
0151                          ; fall through
0151                POPHASSIGNTOVAR:   
0151   E1                     POP   H   
0152                          ; 
0152                          ; Put DE into var (HL)
0152                          ; 
0152   73                     MOV   M,E   
0153   23                     INX   H   
0154   72                     MOV   M,D   
0155                          ; 
0155   C9                     RET   
0156                LISTLOOP:   
0156   3E 20                  MVI   A,' '   
        **MACRO UNROLL - RST_PUTCHAR
0158   CF RST   1   
0159                          ; 
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0159   D7 RST   2   
015A   89                     DB   EndProgram&0ffh   
015B   C8                     RZ   
015C                          ; 
015C   21 56 01               LXI   H,ListLoop   ; so that we can loop using RET
015F   E5                     PUSH   H   
0160                          ; H is already set to the correct page
0160   2E B3                  MVI   L,(TokenList-1)&0ffh   
0162                          ; These need to be on same page
0162                          ; currently on page 3
        **MACRO UNROLL - RST_COMPAREJUMP
0162   DF RST   3   
0163   22 AB                  DB   StringToken,(List_String&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
0165   DF RST   3   
0166   27 82                  DB   LinenumSub&0ffh,(List_Linenum&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
0168   DF RST   3   
0169   20 85                  DB   IntegerToken,(List_Integer&0ffh)-1   
016B   DA B0 01               JC   List_Var   
016E                          ; No need to check for end of TokenList
016E                          ; impossible not to be a token value in A
016E                LIST_TOKEN_LOOP:   
016E   56                     MOV   D,M   
016F   14                     INR   D   
0170   23                     INX   H   
0171   F2 6E 01               JP   List_Token_Loop   
0174                LIST_TOKEN:   
0174                          ; on entry, A contains the token
0174                          ; so must not use A during this loop
0174   BE                     CMP   M   
0175   23                     INX   H   
0176   C2 6E 01               JNZ   List_Token_Loop   
0179                          ; 
0179                LIST_TOKEN_STRING_LOOP:   
0179   7E                     MOV   A,M   
017A   E6 7F                  ANI   07fh   
        **MACRO UNROLL - RST_PUTCHAR
017C   CF RST   1   
017D   B6                     ORA   M   
017E   23                     INX   H   
017F   F2 79 01               JP   List_Token_String_Loop   
0182   C9                     RET   
0183                          ; 
0183                LIST_LINENUM:   
0183   CD 9E 00               CALL   CRLF   
0186                LIST_INTEGER:   
0186   0A                     LDAX   B   
0187   03                     INX   B   
0188   5F                     MOV   E,A   
0189   0A                     LDAX   B   
018A   03                     INX   B   
018B   57                     MOV   D,A   
018C                          ; fall through to PrintInteger
018C                          ; 
018C                          ;Output the value in DE
018C                PRINTINTEGER:   
018C   AF                     XRA   A   
018D   F5                     PUSH   PSW   ; end marker is Z flag
018E                          ; 
018E   B2                     ORA   D   ; S is set if -ve
        **MACRO UNROLL - RST_NEGATEDE
018F   F7 RST   6   
0190                          ; 
0190   F2 97 01               JP   PrintIntegerLoop   
0193   3E 2D                  MVI   A,'-'   
        **MACRO UNROLL - RST_PUTCHAR
0195   CF RST   1   
        **MACRO UNROLL - RST_NEGATEDE
0196   F7 RST   6   
0197                          ; 
0197                PRINTINTEGERLOOP:   
0197                          ; need HL to be -ve here, so that it can
0197                          ; handle -32768
0197                          ; 
0197   EB                     XCHG   
0198   11 0A 00               LXI   D,10   
019B                          ; 
019B   CD F3 02               CALL   DivideHL   
019E                          ; HL contains remainder after / 10
019E                          ; DE contains the quotient
019E   3E 30                  MVI   A,'0'   
01A0   95                     SUB   L   
01A1   F5                     PUSH   PSW   ; push onto stack
01A2                          ; 
01A2                          ; if DE is zero we are done
01A2   7A                     MOV   A,D   
01A3   B3                     ORA   E   
01A4   C2 97 01               JNZ   PrintIntegerLoop   
01A7                          ; 
01A7                PRINTINTEGERLOOP2:   
01A7   F1                     POP   PSW   
01A8   C8                     RZ   
        **MACRO UNROLL - RST_PUTCHAR
01A9   CF RST   1   
        **MACRO UNROLL - RST_JZPAGE
01AA   E7 RST   4   
01AB   A6                     DB   (PrintIntegerLoop2&0ffh)-1   
01AC                LIST_STRING:   
01AC   CD BE 00               CALL   OutputString_WithQuote   
01AF   11                     DB   011h   ; LXI D skips 2 bytes
01B0                LIST_VAR:   
01B0   C6 40                  ADI   '@'   
        **MACRO UNROLL - RST_PUTCHAR
01B2   CF RST   1   
01B3   C9                     RET   ; byte before TokenList must have high bit set
01B4                          ; Index to subroutine address must not overlap with other tokens
01B4                          ; Currently TokenList starts toward the end
01B4                          ; of page 1, and DivSub begins towards the end
01B4                          ; of page 2 and the subroutine extends into page 3
01B4                          ; order in this list must make sure that a
01B4                          ; token A that is a left substring of another
01B4                          ; token B appears later in the list than B
01B4                          ; e.g. < is after <=
01B4                          ; 
01B4                TOKENLIST:   
01B4   21                     DB   QuestionMarkToken&0ffh   
01B5   BF                     DB   '?'+128   
01B6   2A                     DB   PrintSub&0ffh   
01B7   50 52 49 4E D4         DB   "PRIN",'T'+128   
01BC   2D                     DB   LetSub&0ffh   
01BD   4C 45 D4               DB   "LE",'T'+128   
01C0   3F                     DB   GotoSub&0ffh   
01C1   47 4F 54 CF            DB   "GOT",'O'+128   
01C5   3A                     DB   GosubSub&0ffh   
01C6   47 4F 53 55 C2         DB   "GOSU",'B'+128   
01CB   47                     DB   ReturnSub&0ffh   
01CC   52 45 54 55 52 CE      DB   "RETUR",'N'+128   
01D2   51                     DB   InputSub&0ffh   
01D3   49 4E 50 55 D4         DB   "INPU",'T'+128   
01D8   5C                     DB   ForSub&0ffh   
01D9   46 4F D2               DB   "FO",'R'+128   
01DC   5F                     DB   NextSub&0ffh   
01DD   4E 45 58 D4            DB   "NEX",'T'+128   
01E1   7F                     DB   IfSub&0ffh   
01E2   49 C6                  DB   "I",'F'+128   
01E4   8A                     DB   EndSub&0ffh   
01E5   45 4E C4               DB   "EN",'D'+128   
01E8                          ; 
01E8                          ; Before this are keywords allowed at run-time
01E8   86                     DB   ExecuteProgram&0ffh   
01E9   52 55 CE               DB   "RU",'N'+128   
01EC   9F                     DB   ListSub&0ffh   
01ED   4C 49 53 D4            DB   "LIS",'T'+128   
01F1   9E                     DB   NewSub&0ffh   
01F2   4E 45 D7               DB   "NE",'W'+128   
01F5                          ; 
01F5                          ; 
01F5                          ; 
01F5                          ; before operators are non-statement
01F5                          ; non-operator tokens
01F5   A5                     DB   AbsSub&0ffh   
01F6   41 42 D3               DB   "AB",'S'+128   
01F9   A9                     DB   UsrSub&0ffh   
01FA   55 53 D2               DB   "US",'R'+128   
01FD   AB                     DB   RndSub&0ffh   
01FE   52 4E C4               DB   "RN",'D'+128   
0201                          ; 
0201   A0                     DB   ToToken&0ffh   
0202   54 CF                  DB   "T",'O'+128   
0204   A1                     DB   StepToken&0ffh   
0205   53 54 45 D0            DB   "STE",'P'+128   
0209   A3                     DB   CommaToken   
020A   AC                     DB   ","+128   
020B   A8                     DB   LeftBraceToken&0ffh   
020C   A8                     DB   '('+128   
020D   A2                     DB   RightBraceToken&0ffh   
020E   A9                     DB   ')'+128   
020F   D0                     DB   EqualSub&0ffh   
0210   BD                     DB   '='+128   
0211   D3                     DB   NotEqualSub&0ffh   
0212   3C BE                  DB   "<",'>'+128   
0214   C3                     DB   GTESub&0ffh   
0215   3E BD                  DB   ">",'='+128   
0217   C2                     DB   LTESub&0ffh   
0218   3C BD                  DB   "<",'='+128   
021A   C7                     DB   LTSub&0ffh   
021B   BC                     DB   '<'+128   
021C   C6                     DB   GTSub&0ffh   
021D   BE                     DB   '>'+128   
021E   DA                     DB   AddSub&0ffh   
021F   AB                     DB   '+'+128   
0220   DB                     DB   SubSub&0ffh   
0221   AD                     DB   '-'+128   
0222   DF                     DB   MulSub&0ffh   
0223   AA                     DB   '*'+128   
0224   F3                     DB   DivSub&0ffh   
0225   AF                     DB   '/'+128   
0226   FF                     DB   255   ; 255 can only occur at the end
0227                          ; 
0227                LINENUMSUB:   
0227   03                     INX   B   
0228   03                     INX   B   
0229   C9                     RET   
022A                          ; 
022A                PRINTSUB:   
022A   C3 8D 00               JMP   PrintSubImpl   
022D                LETSUB:   
022D   CD A5 00               CALL   GetVarLocationBVar   
0230   E5                     PUSH   H   
0231                          ; 
0231                          ; Test that we have an equals sign
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
0231   D7 RST   2   
0232                          ; 
0232   D0                     DB   EqualSub&0ffh   
0233   C4 D3 00               CNZ   Error   
0236                          ; 
        **MACRO UNROLL - RST_EXPEVALUATE
0236   FF RST   7   
0237                          ; 
0237   C3 51 01               JMP   POPHAssignToVar   
023A                GOSUBSUB:   
        **MACRO UNROLL - RST_EXPEVALUATE
023A   FF RST   7   
023B   E1                     POP   H   
023C                          ; 
023C   C5                     PUSH   B   
023D   E5                     PUSH   H   
023E                          ; 
023E   3E                     DB   03eh   ; opcode for MVI A to eat next byte
023F                GOTOSUB:   
        **MACRO UNROLL - RST_EXPEVALUATE
023F   FF RST   7   
0240   CD B0 03               CALL   GetLineNum   
0243   C8                     RZ   
0244   CD D3 00               CALL   Error   
0247                          ; TODO in place of call error, is there
0247                          ; a two or three byte inst that will
0247                          ; cause C to be set when DAD SP is called below?
0247                          ; 
0247                RETURNSUB:   
0247                          ; Expect stack size to be 6 or more
0247                          ; any less and we have return without gosub
0247   21 0D F8               LXI   H,-(STACK_INIT-6)-1   
024A   39                     DAD   SP   
024B   DC D3 00               CC   Error   
024E                          ; 
024E   E1                     POP   H   ; Get return address first
024F   C1                     POP   B   ; Get pointer to program loc to return to
0250   E9                     PCHL   ; instead of RET
0251                INPUTSUB:   
0251   CD A5 00               CALL   GetVarLocationBVar   
0254   E5                     PUSH   H   
0255   21 F8 07               LXI   H,INPUT_BUFFER   
0258   C5                     PUSH   B   
0259                          ; 
0259   C3 4A 01               JMP   POPHAssignToVar_Prefix   
025C                FORSUB:   
025C   C3 DE 03               JMP   ForSubImpl   
025F                NEXTSUB:   
025F   E1                     POP   H   ; discard return address
0260                          ; stack contains VL+1,S,-T,LS,EPL
0260   E1                     POP   H   ; get VL+1
0261   56                     MOV   D,M   
0262   2B                     DCX   H   
0263   5E                     MOV   E,M   
0264                          ; 
0264   E3                     XTHL   ; step is in HL, VL is in (SP)
0265   EB                     XCHG   ; step is in DE, var value in HL
0266   19                     DAD   D   ; add step onto var
0267   EB                     XCHG   ; result is in DE, step is in HL
0268   E3                     XTHL   ; step is in (SP), VL is in HL
0269                          ; 
0269   73                     MOV   M,E   ; put back into VL
026A   23                     INX   H   ; H = VL+1
026B   72                     MOV   M,D   
026C                          ; 
026C   F1                     POP   PSW   ; get step so that hi bit of A has
026D                          ; sign of step
026D   E1                     POP   H   ; get -T
026E                          ; 
026E   19                     DAD   D   ; HL now has LV-T
026F                          ; 
026F   AC                     XRA   H   ; xor sign of step with
0270                          ; sign of result
0270                          ; 
0270                          ; if result of xor above is 1
0270                          ; then keep looping, or if HL
0270                          ; is zero then keep looping
0270                          ; 
0270   D1                     POP   D   ; this is LoopStart
0271                          ; 
0271   FA 77 02               JM   NextSubLoop   
0274                          ; 
0274   7C                     MOV   A,H   
0275   B5                     ORA   L   
0276   C0                     RNZ   
0277                          ; 
0277                NEXTSUBLOOP:   
0277                          ; 
0277   42                     MOV   B,D   
0278   4B                     MOV   C,E   
0279   21 F6 FF               LXI   H,-10   
027C   39                     DAD   SP   
027D   F9                     SPHL   
027E                          ; 
027E   C9                     RET   
027F                          ; 
027F                IFSUB:    
        **MACRO UNROLL - RST_EXPEVALUATE
027F   FF RST   7   
0280   7A                     MOV   A,D   
0281   B3                     ORA   E   
0282   C0                     RNZ   
0283                          ; If DE zero then fall through to next line
0283   C3 CD 03               JMP   AdvanceToNextLineNum   
0286                EXECUTEPROGRAM:   
0286   37                     STC   ; skip over JNC Ready in a minute
0287                          ; 
0287                          ; Point BC to first line
0287                          ; Don't skip over the line number
0287                          ; because we need the constant PROG_BASE
0287                          ; at this location in memory
0287   01 40 04               LXI   B,PROG_BASE   
028A                ENDSUB:   
028A   D2 DD 00               JNC   Ready   
028D                          ; last byte of PROG_BASE
028D                          ; is 4, which is opcode for INR B, which
028D                          ; has no side effect before JNC Ready
028D                ENDPROGRAM:   EQU   EndSub-1   
028D                          ; TODO above is wrong
028D                EXECUTEPROGRAMLOOP:   
028D   0A                     LDAX   B   
028E                          ; 
028E                EXECUTEDIRECT:   
028E                          ; 
028E   D6 27                  SUI   LineNumSub&0ffh   
0290                          ; 
0290                          ; Check that it is a token between
0290                          ; LinenumSub and ListSub
0290   FE 79                  CPI   (ListSub-LineNumSub+1)&0ffh   
0292   D4 D3 00               CNC   Error   
0295                          ; 
0295   03                     INX   B   
0296   C6 27                  ADI   LineNumSub&0ffh   
0298                          ; 
0298                          ; Carry is clear now
0298                          ; 
0298                          ; Put return address onto stack
0298   21 8D 02               LXI   H,ExecuteProgramLoop   
029B   E5                     PUSH   H   
029C                          ; 
029C                          ; Put pointer to call address into HL
029C   6F                     MOV   L,A   
029D                          ; ExecuteProgramLoop must be on the same page
029D                          ; page as PrintSub so that we don't have to
029D                          ; update H
029D                          ; Jump to it
029D                          ; Carry is clear when we do this
029D   E9                     PCHL   
029E                NEWSUB:   
029E   C7                     RST   0   
029F                          ; 
029F                LISTSUB:   
029F   01 40 04               LXI   B,PROG_BASE   
02A2   C3 56 01               JMP   ListLoop   
02A5                          ; 
02A5                          ; ( ) , TO STEP tokens must have values between
02A5                          ; statements and functions
02A5                TOTOKEN:   EQU   ListSub+1   
02A5                STEPTOKEN:   EQU   ListSub+2   
02A5                RIGHTBRACETOKEN:   EQU   ListSub+3   
02A5                COMMATOKEN:   EQU   ListSub+4   
02A5                ABSSUB:   
02A5                          ; A = right brace token, which has high bit
02A5                          ; set, so no need to negate DE if XRA with D
02A5                          ; still leaves high bit set
02A5   AA                     XRA   D   
02A6   F8                     RM   
        **MACRO UNROLL - RST_NEGATEDE
02A7   F7 RST   6   
02A8                          ; 
02A8                          ; shared code. okay for this to go here
02A8                          ; because in ExpEvaluateNum, test for
02A8                          ; left brace is before test for token
02A8                          ; between first and last function
02A8                LEFTBRACETOKEN:   
02A8   C9                     RET   
02A9                          ; 
02A9                USRSUB:   
02A9   EB                     XCHG   
02AA   E9                     PCHL   
02AB                RNDSUB:   
02AB                          ; LCG
02AB                          ; don't use low byte in return value.
02AB                          ; Multiplier 47989 is mentioned here:
02AB                          ; https://groups.google.com/g/prng/c/evszGs76o1w?pli=1
02AB   D5                     PUSH   D   
02AC   2A 3E 04               LHLD   RNG_SEED   
02AF   11 75 BB               LXI   D,47989   
02B2   CD DF 02               CALL   MulSub   ; A is zero after this
02B5   EB                     XCHG   
02B6   23                     INX   H   
02B7   22 3E 04               SHLD   RNG_SEED   
02BA                          ; Use only the high byte to get a value
02BA                          ; between 0 and 255
02BA   6C                     MOV   L,H   
02BB   67                     MOV   H,A   
02BC   D1                     POP   D   
02BD                          ; 
02BD   CD F3 02               CALL   DivideHL   
02C0   EB                     XCHG   
02C1   C9                     RET   
02C2                          ; XORSHIFT taken from here
02C2                          ; https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
02C2                          ;LHLD RNG_SEED
02C2                          ;MOV A,H
02C2                          ;RAR
02C2                          ;MOV A,L
02C2                          ;RAR
02C2                          ;XRA H
02C2                          ;MOV H,A
02C2                          ;MOV A,L
02C2                          ;RAR
02C2                          ;MOV A,H
02C2                          ;RAR
02C2                          ;XRA L
02C2                          ;MOV L,A
02C2                          ;XRA H ; clears carry
02C2                          ;MOV H,A
02C2                          ;SHLD RNG_SEED
02C2                          ; carry is clear at this point
02C2                          ;RAR
02C2                          ;MOV H,A
02C2                          ; above 2 bytes give us a value between
02C2                          ; 0 and 32767
02C2                          ;CALL DivideHL
02C2                          ;XCHG
02C2                          ;RET
02C2                          ; Token values >= this are all operators
02C2                OPERATORS:   
02C2                          ; 
02C2                LTESUB:   
02C2                          ; Swap operands and fall through
02C2   EB                     XCHG   
02C3                GTESUB:   
        **MACRO UNROLL - RST_COMPAREHLDE
02C3   EF RST   5   
        **MACRO UNROLL - RST_JZPAGE
02C4   E7 RST   4   
02C5   D0                     DB   (BinReturn&0ffh)-1   
02C6                GTSUB:    
02C6                          ; Swap operands and fall through
02C6   EB                     XCHG   
02C7                LTSUB:    
02C7   7D                     MOV   A,L   
02C8   93                     SUB   E   
02C9   7C                     MOV   A,H   
02CA   9A                     SBB   D   
02CB   1F                     RAR   
02CC   AC                     XRA   H   
02CD   AA                     XRA   D   
02CE   17                     RAL   
02CF   3E                     DB   3eh   ; MVI A opcode to swallow next byte
02D0                EQUALSUB:   
        **MACRO UNROLL - RST_COMPAREHLDE
02D0   EF RST   5   ; returns Z iff HL=DE
02D1                BINRETURN:   
02D1   3F                     CMC   
02D2   3E                     DB   3eh   ; MVI A opcode to swallow next byte
02D3                          ; 
02D3                NOTEQUALSUB:   
        **MACRO UNROLL - RST_COMPAREHLDE
02D3   EF RST   5   ; returns Z iff HL=DE
02D4   11 01 00               LXI   D,1   
02D7   D0                     RNC   
02D8   1B                     DCX   D   
02D9   C9                     RET   
02DA                ADDSUB:   
02DA   3E                     DB   3eh   ; opcode for MVI A, to eat next byte
02DB                SUBSUB:   
        **MACRO UNROLL - RST_NEGATEDE
02DB   F7 RST   6   
02DC                          ;Add DE to HL and keep in DE
02DC   19                     DAD   D   
02DD   EB                     XCHG   
02DE                          ; 
02DE   C9                     RET   
02DF                MULSUB:   
02DF                          ; 20 bytes
02DF                          ; multiple HL and DE into DE, preserving B
02DF   C5                     PUSH   B   
02E0   44                     MOV   B,H   
02E1   4D                     MOV   C,L   
02E2                MULTIPLY:   
02E2                          ;multiply BC and DE into DE
02E2   3E 10                  MVI   A,16   
02E4                MULLOOP:   
02E4   29                     DAD   H   
02E5   EB                     XCHG   
02E6   29                     DAD   H   
02E7   EB                     XCHG   
02E8   D2 EC 02               JNC   DontAdd   
02EB   09                     DAD   B   
02EC                DONTADD:   
02EC   3D                     DCR   A   
02ED   C2 E4 02               JNZ   MulLoop   
02F0                          ; 
02F0   EB                     XCHG   
02F1   C1                     POP   B   
02F2   C9                     RET   
02F3                          ; 
02F3                DIVSUB:   
02F3                          ; 31 bytes
02F3                          ;Divide HL by DE
02F3                          ;Remainder in HL
02F3                          ;Result in DE
02F3                DIVIDEHL:   
02F3                          ;Divide HL by DE
02F3                          ; Make HL and DE different signs
02F3   7C                     MOV   A,H   
02F4   CD A5 02               CALL   AbsSub   
02F7   F5                     PUSH   PSW   
02F8                          ; 
02F8                          ;Divide HL by DE
02F8                          ;Assuming that HL and DE are different signs
02F8   C5                     PUSH   B   
02F9   01 FF FF               LXI   B,0ffffh   
02FC                          ; 
02FC                          ; Do the test for zero here because we want the
02FC                          ; JZ to be on page 3
02FC                          ; TODO - need to move this to earlier in DivSub
02FC                          ; otherwise something other than the call address
02FC                          ; is on the stack. (although actually maybe it is useful to have an address within the BASIC program)
02FC   7A                     MOV   A,D   
02FD   B3                     ORA   E   
02FE                DIVJZERROR:   
02FE   CA D3 00               JZ   Error   
0301                DIVLOOP:   
0301   03                     INX   B   
0302   19                     DAD   D   
0303   1F                     RAR   ; look for mismatch between carry and
0304                          ; bit 7 of D to detect overflow/underflow
0304   AA                     XRA   D   
0305   F2 01 03               JP   DivLoop   
0308                          ; if HL is zero then it must have been a negative number originally, and the remainder is zero, so don't make any change to HL, but increment quotient by 1
0308                          ; 
0308   7C                     MOV   A,H   
0309   B5                     ORA   L   
        **MACRO UNROLL - RST_JZPAGE
030A   E7 RST   4   ; assume it is on same page
030B                          ; because DivSub will
030B                          ; be right at end of page 2
030B   0E                     DB   (DivNoRestore&0ffh)-1   
030C                          ; 
        **MACRO UNROLL - RST_NEGATEDE
030C   F7 RST   6   
030D   19                     DAD   D   
030E   0B                     DCX   B   
030F                          ; 
030F                DIVNORESTORE:   
030F   03                     INX   B   
0310   50                     MOV   D,B   
0311   59                     MOV   E,C   
0312                          ; 
0312   C1                     POP   B   
0313                          ; 
0313   F1                     POP   PSW   
0314   F0                     RP   
        **MACRO UNROLL - RST_NEGATEDE
0315   F7 RST   6   
0316                          ; 
0316   C9                     RET   
0317                          ; 
0317                          ; GetLine sits entirely in page 3
0317                          ; good - it uses RST_CompareJump in two
0317                          ; places, so be careful if moving it
0317                          ; Also it assumes ClassLookup on same page
0317                          ; as NoCharClass
0317                NLTESTTRUE:   
0317                          ; error if we are in the middle
0317                          ; of a string
0317   7D                     MOV   A,L   
        **MACRO UNROLL - RST_COMPAREJUMP
0318   DF RST   3   
0319   67                     DB   QuoteClassExpEnd&0ffh   
031A   FD                     DB   (DivJZError-1)&0ffh   
031B                          ; 
031B   E1                     POP   H   
031C   C9                     RET   
031D                GETLINE:   
031D                          ; HL points where we want the line to be
031D                          ; parsed to.
031D                          ; On return HL points to byte adter what we've
031D                          ; got.
031D                          ; 
031D   3E 3E                  MVI   A,'>'   
        **MACRO UNROLL - RST_PUTCHAR
031F   CF RST   1   
0320                          ; 
0320   E5                     PUSH   H   
0321                          ; 
0321                          ; A is zero at this point
0321                          ; (needs to be <>10 on fall to NLTest)
0321                FRESHSTART:   
0321   21 50 03               LXI   H,NoCharClass   
0324                          ; 
0324                NLTEST:   
0324   78                     MOV   A,B   
0325                          ; check for newline
        **MACRO UNROLL - RST_COMPAREJUMP
0325   DF RST   3   
0326   0A 16                  DB   10,(NLTestTrue&0ffh)-1   
0328                          ; 
0328                NEXTCHARLOOP:   
0328                          ; This code is compatable with Dick Whipple's
0328                          ; Front Panel 8080 emulator
0328   DB 01                  IN   1   
032A   E6 80                  ANI   80h   
032C   C2 28 03               JNZ   NextCharLoop   
032F   DB 02                  IN   2   
0331                          ; 
0331   47                     MOV   B,A   
0332                          ; 
0332                          ; Do we have the same class as before?
0332   E5                     PUSH   H   
0333   2E A5                  MVI   L,(ClassLookup&0ffh)-1   
0335                          ; Test for quote first
0335                          ; This doesn't save spave, but takes 3 bytes
0335                          ; away from class lookip and puts them here
0335                          ; so can be used to change odd/even of
0335                          ; ...Class subroutines
        **MACRO UNROLL - RST_COMPAREJUMP
0335   DF RST   3   
0336   22 3D                  DB   34,(LC_QuoteTestTrue-1)&0ffh   
0338                LOOKUPCLASSLOOP:   
0338   2C                     INR   L   
0339   BE                     CMP   M   
033A   2C                     INR   L   
033B   DA 38 03               JC   LookupClassLoop   
033E                LC_QUOTETESTTRUE:   
033E   4E                     MOV   C,M   
033F   E1                     POP   H   
0340                          ; 
0340                          ; are L and C equal?
0340   7D                     MOV   A,L   
0341   A9                     XRA   C   
0342                          ; Z if they are equal, NZ if not
0342   E9                     PCHL   ; Jump based on previous CharClass pointer
0343                DIGITCLASS:   
        **MACRO UNROLL - RST_JZPAGE
0343   E7 RST   4   
0344   54                     DB   (DigitClassNotEnd&0ffh)-1   
0345                DIGITCLASSEND:   
0345                          ; Write token into program
0345                          ; need to preserve DE, don't care about HL
0345   E3                     XTHL   
0346   36 20                  MVI   M,IntegerToken   
0348   23                     INX   H   
0349   73                     MOV   M,E   
034A   23                     INX   H   
034B   36                     DB   36h   ; opcode for MVI M eats next byte
034C                WRITE_SHARED_ATSP:   
034C   D1                     POP   D   
034D                WRITE_SHARED:   
034D   72                     MOV   M,D   
034E                WRITE_SHARED_WRITTEN:   
034E   23                     INX   H   
034F   E3                     XTHL   
0350                NOCHARCLASS:   
0350   69                     MOV   L,C   
0351   AF                     XRA   A   ; set Z
0352   57                     MOV   D,A   ; reset state information
0353   5F                     MOV   E,A   
0354   E9                     PCHL   
0355                DIGITCLASSNOTEND:   
0355   E5                     PUSH   H   
0356                          ; A is zero at this point
0356                          ; Accumulate the value into D
0356                          ; Muliply by 10
0356   62                     MOV   H,D   
0357   6B                     MOV   L,E   
0358                          ; 
0358   29                     DAD   H   
0359   29                     DAD   H   
035A   19                     DAD   D   
035B   29                     DAD   H   
035C                          ; 
035C                          ; Add in the new digit
035C                          ; 
035C   57                     MOV   D,A   
035D   78                     MOV   A,B   
035E   E6 0F                  ANI   0fh   
0360   5F                     MOV   E,A   
0361   19                     DAD   D   
0362                          ; 
0362   EB                     XCHG   
0363                          ; 
0363   E1                     POP   H   
0364                          ; 
0364   C3 28 03               JMP   NextCharLoop   
0367                QUOTECLASSEXPEND:   
0367                          ; A is equal to:
0367                          ; char class (C) XOR QuoteCharClassExpEnd
0367                          ; 
0367                          ; so long as QuoteCharClass is the only class
0367                          ; with an odd address or the only one
0367                          ; with an even address then A will only
0367                          ; have LSB=1 if current char class
0367                          ; is QuoteCharClass - i.e. end of string
0367                          ; 
0367   E6                     DB   0e6h   ; opcode for ANI eats next byte
0368                          ; (which is 2dh lsbits are 01)
0368                          ; 
0368                QUOTECLASS:   
0368   2D                     DCR   L   ; set to QuoteClassExpEnd
0369                          ; first time through A is zero
0369                          ; on fall A is even unless C is QuoteClass
0369                          ; 
0369   A4                     ANA   H   ; H is 3
036A                          ; 
036A                          ; Now Z is set if this was first Quote, or if
036A                          ; we are in a string and haven't reached
036A                          ; last quote
036A                          ; 
036A                          ; carry is clear here
036A   DA                     DB   0dah   ; opcode for JC eats next 2 bytes
036B                LT0CLASS:   
036B   23                     INX   H   ; next char should always count as
036C                          ; different class
036C   00                     NOP   
036D                COMPCLASS:   
036D   00                     NOP   
036E   00                     NOP   
036F                ALPHACLASS:   
036F                          ; 
036F   E3                     XTHL   
0370   70                     MOV   M,B   
0371   23                     INX   H   
0372   E3                     XTHL   
0373                          ; 
0373   1B                     DCX   D   ; increase char count
0374                          ; 
0374                          ; if NZ then we will just
0374                          ; have written a different class char:
0374                          ; good, this ensures no spurious
0374                          ; strcmp matches from leftover
0374                          ; buffer contents
0374                          ; 
0374                          ; now we need to decide whether to jump to:
0374                          ; FreshStart - if its the last quote in
0374                          ;							 a string
0374                          ; NLTest		 - if part way through string or
0374                          ;								token
0374                          ; TokenClassEnd - if end of token
0374                          ; 
        **MACRO UNROLL - RST_JZPAGE
0374   E7 RST   4   
0375   23                     DB   (NLTest&0ffh)-1   
0376                          ; 
0376   7D                     MOV   A,L   
        **MACRO UNROLL - RST_COMPAREJUMP
0377   DF RST   3   
0378   67 20                  DB   QuoteClassExpEnd&0ffh,(FreshStart&0ffh)-1   
037A                          ; 
037A                TOKENCLASSEND:   
037A                          ; Make H point to the start of the token
037A                          ; to be looked up
037A   E3                     XTHL   
037B   19                     DAD   D   
037C                          ; 
037C                          ; it's a var if bits 7,6,5 are 010 and
037C                          ; E=-2
037C                          ; TODO These aren't the only conditions that
037C                          ; could lead to the test below passing -
037C                          ; e.g. if 7,6,5=001 and E=10011110.
037C   7E                     MOV   A,M   
037D   EE 40                  XRI   040h   
037F   57                     MOV   D,A   
0380   E6 E0                  ANI   0e0h   
0382   AB                     XRA   E   
0383                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
0383   DF RST   3   
0384   FE 4C                  DB   0feh,(Write_Shared&0ffh)-1   
0386                          ; 
0386   11 B4 01               LXI   D,TokenList   
0389                LOOKUPTOKEN_LOOP:   
0389   1A                     LDAX   D   
038A   F5                     PUSH   PSW   
038B   E5                     PUSH   H   
038C                STRCMP:   
038C   13                     INX   D   
038D   1A                     LDAX   D   
038E   AE                     XRA   M   
038F                          ; iff match then A is either 00h or 80h
038F                          ; (80h if last char)
038F   23                     INX   H   
        **MACRO UNROLL - RST_JZPAGE
0390   E7 RST   4   
0391   8B                     DB   (Strcmp&0ffh)-1   ; match and not last char
0392                          ; 
0392                          ; equal to 080h iff match and last char
0392   EE 80                  XRI   080h   
0394                          ; equal to Z iff match and last char
0394   E1                     POP   H   
0395                          ; 
        **MACRO UNROLL - RST_JZPAGE
0395   E7 RST   4   
0396   4B                     DB   (Write_Shared_AtSP&0ffh)-1   
0397                          ; 
0397   F1                     POP   PSW   
0398                          ; 
0398                LOOKUPTOKEN:   
0398   1A                     LDAX   D   
0399   3C                     INR   A   
039A   13                     INX   D   
039B   FA 89 03               JM   LookupToken_Loop   
039E   C2 98 03               JNZ   LookupToken   
03A1                          ; 
03A1                          ; didn't find it
03A1                          ; if (HL)>=64 and (HL+1)<64 then its a var
03A1                          ; could do the var test here
03A1                          ; if it can be done in few bytes
03A1                          ; 
03A1   36 21                  MVI   M,QuestionMarkToken&0ffh   
        **MACRO UNROLL - RST_JZPAGE
03A3   E7 RST   4   
03A4   4D                     DB   (Write_Shared_Written&0ffh)-1   
03A5   68                     DB   QuoteClass&0ffh   
03A6                CLASSLOOKUP:   
03A6   40 6F                  DB   64,AlphaClass&0ffh   
03A8   3A 6D                  DB   58,CompClass&0ffh   
03AA   30 43                  DB   48,DigitClass&0ffh   
03AC   21 6B                  DB   33,LT0Class&0ffh   
03AE   00 21                  DB   0,FreshStart&0ffh   
03B0                GETLINENUM:   
03B0                          ; Line number is in DE, look it up in the program and set BC to the line num token
03B0                          ; DE is preserved
03B0                          ; H is preserved
03B0                          ; L is not preserved
03B0                          ; 
03B0                          ; return with Z set if successful
03B0                          ; 
03B0                          ; Z clear if not successful, and BC points
03B0                          ; to the first byte of the line with number
03B0                          ; greater than the request
03B0                          ; 
03B0   01 3F 04               LXI   B,PROG_BASE-1   ; 1 bytes before PROG_BASE
03B3                GETLINENUMLOOP:   
03B3   CD CC 03               CALL   ATNLN_INXB   ; has one INX B preceeding
03B6   C0                     RNZ   
03B7                          ; 
03B7   03                     INX   B   
03B8                          ; 
03B8                          ; Test for DE <= (BC), and return if true
03B8   0A                     LDAX   B   
03B9   03                     INX   B   
03BA   93                     SUB   E   
03BB   6F                     MOV   L,A   
03BC   0A                     LDAX   B   
03BD   9A                     SBB   D   ; C set if DE > (BC), and Z not set
03BE                          ; C clear if DE <= (BC)
03BE   DA B3 03               JC   GetLineNumLoop   
03C1                          ; 
03C1   0B                     DCX   B   
03C2   0B                     DCX   B   
03C3                          ; Now we want Z set if DE=(BC), clear
03C3                          ; otherwise
03C3                          ; 
03C3                ATNLN_RETNZ:   ; shared code. Returns NZ if we know
03C3                          ; that A is non-zero
03C3   B5                     ORA   L   
03C4                          ; 
03C4   C9                     RET   
03C5                ATNLN_STRING:   
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
03C5   D7 RST   2   
03C6   22                     DB   StringToken   
03C7   C2 C5 03               JNZ   ATNLN_String   
03CA                          ; 
03CA   C2                     DB   0c2h   ; opcode for JNZ eats 2 bytes
03CB                ATNLN_INT:   ; Z is always set when we reach here
03CB   03                     INX   B   
03CC                ATNLN_INXB:   
03CC   03                     INX   B   
03CD                          ; 
03CD                ADVANCETONEXTLINENUM:   
03CD                          ; BC is a pointer to somewhere in the program
03CD                          ; move onto the next line number
03CD                          ; return with Z set if successful
03CD                          ; Z clear if fell off end of program
03CD   0A                     LDAX   B   
        **MACRO UNROLL - RST_COMPAREJUMP
03CE   DF RST   3   
03CF   89 C2                  DB   EndProgram&0ffh,(ATNLN_RetNZ&0ffh)-1   
03D1                          ; fell off end of program
03D1                          ; 
03D1   FE 27                  CPI   LinenumSub&0ffh   
03D3   C8                     RZ   
03D4                          ; 
03D4   03                     INX   B   
03D5                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
03D5   DF RST   3   
03D6   20 CA                  DB   IntegerToken,(ATNLN_Int&0ffh)-1   
        **MACRO UNROLL - RST_COMPAREJUMP
03D8   DF RST   3   
03D9   22 C4                  DB   StringToken,(ATNLN_String&0ffh)-1   
03DB   C3 CD 03               JMP   AdvanceToNextLineNum   
03DE                FORSUBIMPL:   
03DE                          ; Stack contains return address:
03DE                          ; ExecuteProgramLoop - EPL
03DE                          ; Keep it there even though it isn't used by
03DE                          ; ForSub, it will be used by NextSub
03DE                          ; 
03DE                          ; First part is just like let statement
03DE   CD 2D 02               CALL   LetSub   
03E1                          ; 
03E1   E5                     PUSH   H   ; stack has var addr + 1 (VL+1), EPL
03E2                          ; 
        **MACRO UNROLL - RST_LDAXB_INXB_CPI
03E2   D7 RST   2   
03E3                          ; 
03E3   A0                     DB   ToToken&0ffh   
03E4   C4 D3 00               CNZ   Error   
03E7                          ; 
        **MACRO UNROLL - RST_EXPEVALUATE
03E7   FF RST   7   
        **MACRO UNROLL - RST_NEGATEDE
03E8   F7 RST   6   
03E9                          ; 
03E9   D5                     PUSH   D   ; stack contains -T,VL+1, EPL
03EA                          ; T is target
03EA                          ; 
03EA   11 01 00               LXI   D,1   
03ED   0A                     LDAX   B   
03EE                          ; 
        **MACRO UNROLL - RST_COMPAREJUMP
03EE   DF RST   3   
03EF   A1 F1                  DB   StepToken&0ffh,(ForWithStep&0ffh)-1   
03F1   21                     DB   21h   ; LXI H opcode eats the next 2 bytes
03F2                FORWITHSTEP:   
03F2                          ; we have step token
03F2   03                     INX   B   
        **MACRO UNROLL - RST_EXPEVALUATE
03F3   FF RST   7   
03F4                          ; 
03F4   E1                     POP   H   
03F5   E1                     POP   H   
03F6   C5                     PUSH   B   ; stack contains -T,LS,EPL
03F7   3B                     DCX   SP   
03F8   3B                     DCX   SP   
03F9   D5                     PUSH   D   ; stack contains S,-T,LS,EPL
03FA   E5                     PUSH   H   ; stack contains VL+1,S,-T,LS,EPL
03FB                          ; 
03FB   C3 8D 02               JMP   ExecuteProgramLoop   
03FE                          ; 


RAM_BASE:           0400 DEFINED AT LINE 298
                    > USED AT LINE 328
                    > USED AT LINE 332
                    > USED AT LINE 335
                    > USED AT LINE 336
                    > USED AT LINE 338
RAM_TOP:            0800 DEFINED AT LINE 299
                    > USED AT LINE 324
                    > USED AT LINE 325
INTEGERTOKEN:       0020 DEFINED AT LINE 305
                    > USED AT LINE 518
                    > USED AT LINE 774
                    > USED AT LINE 944
                    > USED AT LINE 1605
                    > USED AT LINE 1863
QUESTIONMARKTOKEN:  0021 DEFINED AT LINE 306
                    > USED AT LINE 1047
                    > USED AT LINE 1782
STRINGTOKEN:        0022 DEFINED AT LINE 307
                    > USED AT LINE 634
                    > USED AT LINE 697
                    > USED AT LINE 940
                    > USED AT LINE 1837
                    > USED AT LINE 1865
INPUT_BUFFER:       07F8 DEFINED AT LINE 324
                    > USED AT LINE 1177
STACK_INIT:         07F8 DEFINED AT LINE 325
                    > USED AT LINE 749
                    > USED AT LINE 1164
VAR_SPACE:          0400 DEFINED AT LINE 328
                    > USED AT LINE 669
PROG_PTR:           0400 DEFINED AT LINE 332
                    > USED AT LINE 361
                    > USED AT LINE 753
                    > USED AT LINE 794
                    > USED AT LINE 860
PROG_PARSE_PTR:     043C DEFINED AT LINE 335
                    > USED AT LINE 682
                    > USED AT LINE 761
                    > USED AT LINE 813
RNG_SEED:           043E DEFINED AT LINE 336
                    > USED AT LINE 1336
                    > USED AT LINE 1341
PROG_BASE:          0440 DEFINED AT LINE 338
                    > USED AT LINE 1250
                    > USED AT LINE 1298
                    > USED AT LINE 1806
PUTCHAR:            0008 DEFINED AT LINE 372
PUTCHARWAITLOOP:    000A DEFINED AT LINE 375
COMPAREJUMP_ENTRY:  0021 DEFINED AT LINE 425
                    > USED AT LINE 416
JZPAGE_SKIP:        0025 DEFINED AT LINE 428
                    > USED AT LINE 426
EXPAPPLYOP:         0026 DEFINED AT LINE 430
                    > USED AT LINE 561
                    > USED AT LINE 576
COMPAREHLDE:        0028 DEFINED AT LINE 439
NEGATEDE:           0030 DEFINED AT LINE 458
EXPEVALUATE:        0038 DEFINED AT LINE 482
EXPEVALUATENUM:     003F DEFINED AT LINE 495
                    > USED AT LINE 489
                    > USED AT LINE 611
                    > USED AT LINE 639
EXPINTEGER:         0054 DEFINED AT LINE 527
EXPVAR:             0058 DEFINED AT LINE 534
                    > USED AT LINE 519
EXPVARGETVALUE:     005B DEFINED AT LINE 538
EXPEVALUATEOP:      005E DEFINED AT LINE 543
                    > USED AT LINE 601
                    > USED AT LINE 709
SKIPEXPAPPLYOP:     006D DEFINED AT LINE 579
                    > USED AT LINE 555
EXPNEGATE:          0074 DEFINED AT LINE 596
                    > USED AT LINE 503
PRINTSUBSTRING:     0083 DEFINED AT LINE 614
                    > USED AT LINE 634
PRINTSUBINTEGER:    0086 DEFINED AT LINE 616
                    > USED AT LINE 640
PRINTSUBLOOP:       008A DEFINED AT LINE 620
                    > USED AT LINE 636
PRINTSUBIMPL:       008D DEFINED AT LINE 625
                    > USED AT LINE 1128
CRLF:               009E DEFINED AT LINE 647
                    > USED AT LINE 736
                    > USED AT LINE 751
                    > USED AT LINE 975
GETVARLOCATIONBVAR: 00A5 DEFINED AT LINE 654
                    > USED AT LINE 1131
                    > USED AT LINE 1174
GETVARLOCATION:     00AA DEFINED AT LINE 661
                    > USED AT LINE 537
OUTPUTSTRINGRET:    00B8 DEFINED AT LINE 687
                    > USED AT LINE 699
OUTPUTSTRING:       00B9 DEFINED AT LINE 692
                    > USED AT LINE 615
OUTPUTSTRINGLOOP:   00BA DEFINED AT LINE 695
                    > USED AT LINE 703
OUTPUTSTRING_WITHQUOTE: 00BE DEFINED AT LINE 700
                    > USED AT LINE 1027
EXPLEFTBRACE:       00C1 DEFINED AT LINE 705
                    > USED AT LINE 501
FUNCTIONCALL:       00C2 DEFINED AT LINE 707
                    > USED AT LINE 510
EXPBRACKETEDB:      00CA DEFINED AT LINE 721
                    > USED AT LINE 677
ERROR:              00D3 DEFINED AT LINE 735
                    > USED AT LINE 490
                    > USED AT LINE 659
                    > USED AT LINE 724
                    > USED AT LINE 804
                    > USED AT LINE 1138
                    > USED AT LINE 1156
                    > USED AT LINE 1166
                    > USED AT LINE 1272
                    > USED AT LINE 1483
                    > USED AT LINE 1882
READY:              00DD DEFINED AT LINE 744
                    > USED AT LINE 829
                    > USED AT LINE 872
                    > USED AT LINE 1253
LINESTARTSWITHINT:  00FA DEFINED AT LINE 777
DELETEPROGRAMLINE:  011B DEFINED AT LINE 825
                    > USED AT LINE 799
ENTRY:              012B DEFINED AT LINE 855
                    > USED AT LINE 823
MEMORYROTATE:       012F DEFINED AT LINE 862
REVERSEDH:          0139 DEFINED AT LINE 875
                    > USED AT LINE 870
REVERSE:            013C DEFINED AT LINE 880
                    > USED AT LINE 869
REVERSELOOP:        013C DEFINED AT LINE 884
                    > USED AT LINE 898
POPHASSIGNTOVAR_PREFIX: 014A DEFINED AT LINE 900
                    > USED AT LINE 1180
POPHASSIGNTOVAR:    0151 DEFINED AT LINE 911
                    > USED AT LINE 1142
LISTLOOP:           0156 DEFINED AT LINE 923
                    > USED AT LINE 931
                    > USED AT LINE 1299
LIST_TOKEN_LOOP:    016E DEFINED AT LINE 951
                    > USED AT LINE 955
                    > USED AT LINE 962
LIST_TOKEN:         0174 DEFINED AT LINE 957
LIST_TOKEN_STRING_LOOP: 0179 DEFINED AT LINE 964
                    > USED AT LINE 970
LIST_LINENUM:       0183 DEFINED AT LINE 974
                    > USED AT LINE 942
LIST_INTEGER:       0186 DEFINED AT LINE 977
                    > USED AT LINE 944
PRINTINTEGER:       018C DEFINED AT LINE 987
                    > USED AT LINE 617
                    > USED AT LINE 740
PRINTINTEGERLOOP:   0197 DEFINED AT LINE 999
                    > USED AT LINE 994
                    > USED AT LINE 1017
PRINTINTEGERLOOP2:  01A7 DEFINED AT LINE 1019
                    > USED AT LINE 1024
LIST_STRING:        01AC DEFINED AT LINE 1026
                    > USED AT LINE 940
LIST_VAR:           01B0 DEFINED AT LINE 1030
                    > USED AT LINE 946
TOKENLIST:          01B4 DEFINED AT LINE 1046
                    > USED AT LINE 935
                    > USED AT LINE 1742
LINENUMSUB:         0227 DEFINED AT LINE 1122
                    > USED AT LINE 811
                    > USED AT LINE 942
                    > USED AT LINE 1267
                    > USED AT LINE 1271
                    > USED AT LINE 1276
                    > USED AT LINE 1857
PRINTSUB:           022A DEFINED AT LINE 1127
                    > USED AT LINE 608
                    > USED AT LINE 714
                    > USED AT LINE 1049
LETSUB:             022D DEFINED AT LINE 1130
                    > USED AT LINE 1051
                    > USED AT LINE 1875
GOSUBSUB:           023A DEFINED AT LINE 1144
                    > USED AT LINE 1055
GOTOSUB:            023F DEFINED AT LINE 1152
                    > USED AT LINE 1053
RETURNSUB:          0247 DEFINED AT LINE 1161
                    > USED AT LINE 1057
INPUTSUB:           0251 DEFINED AT LINE 1172
                    > USED AT LINE 1059
FORSUB:             025C DEFINED AT LINE 1182
                    > USED AT LINE 1061
NEXTSUB:            025F DEFINED AT LINE 1185
                    > USED AT LINE 1063
NEXTSUBLOOP:        0277 DEFINED AT LINE 1224
                    > USED AT LINE 1218
IFSUB:              027F DEFINED AT LINE 1234
                    > USED AT LINE 1065
EXECUTEPROGRAM:     0286 DEFINED AT LINE 1243
                    > USED AT LINE 359
                    > USED AT LINE 1071
ENDSUB:             028A DEFINED AT LINE 1252
                    > USED AT LINE 1067
                    > USED AT LINE 1259
ENDPROGRAM:         0289 DEFINED AT LINE 1259
                    > USED AT LINE 759
                    > USED AT LINE 772
                    > USED AT LINE 798
                    > USED AT LINE 928
                    > USED AT LINE 1854
EXECUTEPROGRAMLOOP: 028D DEFINED AT LINE 1262
                    > USED AT LINE 1281
                    > USED AT LINE 1910
EXECUTEDIRECT:      028E DEFINED AT LINE 1265
                    > USED AT LINE 775
NEWSUB:             029E DEFINED AT LINE 1294
                    > USED AT LINE 1075
LISTSUB:            029F DEFINED AT LINE 1297
                    > USED AT LINE 1073
                    > USED AT LINE 1271
                    > USED AT LINE 1304
                    > USED AT LINE 1305
                    > USED AT LINE 1306
                    > USED AT LINE 1307
TOTOKEN:            02A0 DEFINED AT LINE 1304
                    > USED AT LINE 1090
                    > USED AT LINE 1881
STEPTOKEN:          02A1 DEFINED AT LINE 1305
                    > USED AT LINE 1092
                    > USED AT LINE 1894
RIGHTBRACETOKEN:    02A2 DEFINED AT LINE 1306
                    > USED AT LINE 729
                    > USED AT LINE 1098
COMMATOKEN:         02A3 DEFINED AT LINE 1307
                    > USED AT LINE 636
                    > USED AT LINE 1094
ABSSUB:             02A5 DEFINED AT LINE 1309
                    > USED AT LINE 509
                    > USED AT LINE 1083
                    > USED AT LINE 1466
LEFTBRACETOKEN:     02A8 DEFINED AT LINE 1321
                    > USED AT LINE 499
                    > USED AT LINE 723
                    > USED AT LINE 1096
USRSUB:             02A9 DEFINED AT LINE 1324
                    > USED AT LINE 1085
RNDSUB:             02AB DEFINED AT LINE 1329
                    > USED AT LINE 506
                    > USED AT LINE 1087
OPERATORS:          02C2 DEFINED AT LINE 1384
                    > USED AT LINE 585
LTESUB:             02C2 DEFINED AT LINE 1386
                    > USED AT LINE 1106
GTESUB:             02C3 DEFINED AT LINE 1389
                    > USED AT LINE 1104
GTSUB:              02C6 DEFINED AT LINE 1393
                    > USED AT LINE 1110
LTSUB:              02C7 DEFINED AT LINE 1396
                    > USED AT LINE 1108
EQUALSUB:           02D0 DEFINED AT LINE 1407
                    > USED AT LINE 1100
                    > USED AT LINE 1137
BINRETURN:          02D1 DEFINED AT LINE 1409
                    > USED AT LINE 1392
NOTEQUALSUB:        02D3 DEFINED AT LINE 1413
                    > USED AT LINE 1102
ADDSUB:             02DA DEFINED AT LINE 1420
                    > USED AT LINE 1112
SUBSUB:             02DB DEFINED AT LINE 1422
                    > USED AT LINE 503
                    > USED AT LINE 1114
MULSUB:             02DF DEFINED AT LINE 1430
                    > USED AT LINE 561
                    > USED AT LINE 1116
                    > USED AT LINE 1338
MULTIPLY:           02E2 DEFINED AT LINE 1437
MULLOOP:            02E4 DEFINED AT LINE 1440
                    > USED AT LINE 1450
DONTADD:            02EC DEFINED AT LINE 1447
                    > USED AT LINE 1445
DIVSUB:             02F3 DEFINED AT LINE 1456
                    > USED AT LINE 1118
DIVIDEHL:           02F3 DEFINED AT LINE 1462
                    > USED AT LINE 1006
                    > USED AT LINE 1348
DIVJZERROR:         02FE DEFINED AT LINE 1482
                    > USED AT LINE 1531
DIVLOOP:            0301 DEFINED AT LINE 1485
                    > USED AT LINE 1491
DIVNORESTORE:       030F DEFINED AT LINE 1506
                    > USED AT LINE 1500
NLTESTTRUE:         0317 DEFINED AT LINE 1525
                    > USED AT LINE 1558
GETLINE:            031D DEFINED AT LINE 1536
                    > USED AT LINE 757
                    > USED AT LINE 904
FRESHSTART:         0321 DEFINED AT LINE 1550
                    > USED AT LINE 1719
                    > USED AT LINE 1792
NLTEST:             0324 DEFINED AT LINE 1554
                    > USED AT LINE 1715
NEXTCHARLOOP:       0328 DEFINED AT LINE 1560
                    > USED AT LINE 1565
                    > USED AT LINE 1653
LOOKUPCLASSLOOP:    0338 DEFINED AT LINE 1580
                    > USED AT LINE 1584
LC_QUOTETESTTRUE:   033E DEFINED AT LINE 1585
                    > USED AT LINE 1579
DIGITCLASS:         0343 DEFINED AT LINE 1596
                    > USED AT LINE 1790
DIGITCLASSEND:      0345 DEFINED AT LINE 1600
WRITE_SHARED_ATSP:  034C DEFINED AT LINE 1610
                    > USED AT LINE 1765
WRITE_SHARED:       034D DEFINED AT LINE 1612
                    > USED AT LINE 1740
WRITE_SHARED_WRITTEN: 034E DEFINED AT LINE 1614
                    > USED AT LINE 1784
NOCHARCLASS:        0350 DEFINED AT LINE 1618
                    > USED AT LINE 1552
DIGITCLASSNOTEND:   0355 DEFINED AT LINE 1626
                    > USED AT LINE 1598
QUOTECLASSEXPEND:   0367 DEFINED AT LINE 1655
                    > USED AT LINE 1530
                    > USED AT LINE 1719
QUOTECLASS:         0368 DEFINED AT LINE 1669
                    > USED AT LINE 1786
LT0CLASS:           036B DEFINED AT LINE 1684
                    > USED AT LINE 1791
COMPCLASS:          036D DEFINED AT LINE 1689
                    > USED AT LINE 1789
ALPHACLASS:         036F DEFINED AT LINE 1692
                    > USED AT LINE 1788
TOKENCLASSEND:      037A DEFINED AT LINE 1721
LOOKUPTOKEN_LOOP:   0389 DEFINED AT LINE 1744
                    > USED AT LINE 1773
STRCMP:             038C DEFINED AT LINE 1748
                    > USED AT LINE 1756
LOOKUPTOKEN:        0398 DEFINED AT LINE 1769
                    > USED AT LINE 1774
CLASSLOOKUP:        03A6 DEFINED AT LINE 1787
                    > USED AT LINE 1572
GETLINENUM:         03B0 DEFINED AT LINE 1794
                    > USED AT LINE 792
                    > USED AT LINE 1154
GETLINENUMLOOP:     03B3 DEFINED AT LINE 1808
                    > USED AT LINE 1822
ATNLN_RETNZ:        03C3 DEFINED AT LINE 1829
                    > USED AT LINE 1854
ATNLN_STRING:       03C5 DEFINED AT LINE 1835
                    > USED AT LINE 1838
                    > USED AT LINE 1865
ATNLN_INT:          03CB DEFINED AT LINE 1841
                    > USED AT LINE 838
                    > USED AT LINE 1863
ATNLN_INXB:         03CC DEFINED AT LINE 1843
                    > USED AT LINE 1809
ADVANCETONEXTLINENUM: 03CD DEFINED AT LINE 1846
                    > USED AT LINE 1241
                    > USED AT LINE 1866
FORSUBIMPL:         03DE DEFINED AT LINE 1868
                    > USED AT LINE 1183
FORWITHSTEP:        03F2 DEFINED AT LINE 1897
                    > USED AT LINE 1894